<?php
/**
 * @file
 * Code for the cu_block_selector feature.
 */

include_once 'cu_block_selector.features.inc';
include_once 'bean.inline_entity_form.inc';

/**
 * Implements hook_menu().
 */
function cu_block_selector_menu() {
  // Admin configuration form.t
  $items['admin/config/system/cu_block_selector'] = array(
    'title' => 'CU Block Selector',
    'description' => 'Configure content types and fields for CU Block Selector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_block_selector_admin_settings'),
    'file' => 'cu_block_selector.admin.inc',
    'access arguments' => array('administer cu block selector'),
  );

  $items['node/%node/blocks'] = array(
    'title' => t('Edit Blocks'),
    'page callback' => 'cu_block_selector_node_edit',

// this ensures file field proper functionality on node edit form
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'page arguments' => array(1),
    'access callback' => '_cu_block_selector_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  return $items;
}

/**
 * Access callback for node/%node/blocks.
 */
function _cu_block_selector_access($op, $node) {
  $types = variable_get('cu_block_selector_types', '');
  if (user_access('edit cu blocks') && in_array($node->type, $types) && (string)$types[$node->type] == (string)$node->type) {
    return node_access($op, $node);
  }
  return FALSE;
}

/**
 * Page callback for node/%node/blocks.
 */
function cu_block_selector_node_edit($node) {
  module_load_include('inc', 'node', 'node.pages');
  $form = drupal_get_form($node->type . '_node_form', $node);
  return render($form);
}

/**
 * Implements hook_admin_paths().
 */
function cu_block_selector_admin_paths() {
  $paths = array(
    'node/*/blocks' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function cu_block_selector_permission() {
  return array(
    'administer cu block selector' => array(
      'title' => 'Administer CU Block Selector',
      'description' => 'Configure content types/fields on which to use block selector',
    ),
    'edit cu blocks' => array(
      'title' => 'Edit Blocks',
      'description' => 'Edit block selector',
    ),
  );
}

/**
 * Returns an array of fields this module cares about.
 */
function _cu_block_selector_all_fields() {
  $fields = array(
    'field_override_sidebar_first' => array(
      'label' => t('Override Sidebar Left'),
      'required' => TRUE,
      'default_value' => array(array('value' => 0)),
      'field_widget' => 'checkbox',
    ),
    'field_sidebar_first' => array(
      'label' => t('Left Sidebar'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_override_sidebar_second' => array(
      'label' => t('Override Sidebar Right'),
      'required' => TRUE,
      'default_value' => array(array('value' => 0)),
      'field_widget' => 'checkbox',
    ),
    'field_sidebar_second' => array(
      'label' => t('Right Sidebar'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_header' => array(
      'label' => t('Above Content'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_footer' => array(
      'label' => t('Below Content'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_inner_content_right' => array(
      'label' => t('Inner Right'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_inner_content_left' => array(
      'label' => t('Inner Left'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_intro' => array(
      'label' => t('Intro Wide'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_slider' => array(
      'label' => t('Slider'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
    'field_wide_2' => array(
      'label' => t('Post Wide'),
      'required' => FALSE,
      'field_widget' => 'inline_entity_form',
    ),
  );
  return $fields;
}

/**
 * Implements hook_block_info().
 */
function cu_block_selector_block_info() {
  return array(
    'cu_block_header' => array(
      'info' => t('Node Header'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_footer' => array(
      'info' => t('Node Footer'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_sidebar_first' => array(
      'info' => t('Node Sidebar First'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'cu_block_sidebar_second' => array(
      'info' => t('Node Sidebar Second'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_inner_content_left' => array(
      'info' => t('Node Inner Content Left'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_inner_content_right' => array(
      'info' => t('Node Inner Content Right'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_intro' => array(
      'info' => t('Intro'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_slider' => array(
      'info' => t('Slider'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'cu_block_wide_2' => array(
      'info' => t('Post Wide'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Return a rendered or renderable view of a block.
 *
 * @param array $delta
 *   Which block to render. This is a unique identifier for the block
 *   within the module, defined in hook_block_info().
 *
 * @return array
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does not
 *     have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable array
 *     (preferable) or a string containing rendered HTML content.
 */
function cu_block_selector_block_view($delta = '') {
  $block = array();
  $node = menu_get_object();
  $selector_types = variable_get('cu_block_selector_types', array());

  // If not on a node or node type is not in $selector_types, return empty.
  if (!isset($node->nid)|| !in_array($node->type, $selector_types)) {
    return array();
  }

  // Map fields to regions.
  if (isset ($delta)) {
    switch ($delta) {
      case 'cu_block_header':
        $field = 'field_header';
        $region = 'content';
        break;

      case 'cu_block_footer':
        $field = 'field_footer';
        $region = 'content';
        break;

      case 'cu_block_sidebar_first':
        $field = 'field_sidebar_first';
        $region = 'sidebar_first';
        break;

      case 'cu_block_sidebar_second':
        $field = 'field_sidebar_second';
        $region = 'sidebar_second';
        break;

      case 'cu_block_inner_content_right':
        $field = 'field_inner_content_right';
        $region = 'content_sidebar_right';
        break;

      case 'cu_block_inner_content_left':
        $field = 'field_inner_content_left';
        $region = 'content_sidebar_left';
        break;

      case 'cu_block_intro':
        $field = 'field_intro';
        $region = 'intro';
        break;

      case 'cu_block_slider':
        $field = 'field_slider';
        $region = 'slider';
        break;

      case 'cu_block_wide_2':
        $field = 'field_wide_2';
        $region = 'wide_2';
        break;
    }
  }

  // Only show blocks on nodes of type $selector_types.
  if (isset($node->nid) && in_array($node->type, $selector_types)) {
    // If the field is not empty,
    if (!empty($node->{$field}[LANGUAGE_NONE])) {
      // Loop through all referenced beans.
      foreach ($node->{$field}[LANGUAGE_NONE] as $block) {
        $beans[] = $block['target_id'];
      }
      // Load the bean objects.
      $beans = bean_load_multiple($beans);
      // Loop through all bean objects.
      foreach ($beans as $bean) {
        // If user has view access.
        if (bean_access('view', $bean)) {
          // Add to $extra.
          $extra[$bean->delta] = _cu_block_selector_bean_to_block($bean, $region);
        }
      }
    }
  }
  // If we have beans to render, add them to $block['content'].
  if (isset($extra)) {
    $block['content'] = $extra;
    $block['subject'] = '';
  }
  return $block;
}

/**
 * Implements hook_node_presave().
 *
 * Right before a 'page' node gets saved, update the sidebar fields
 * of this node and its children, adhering to the override field.
 * This hook is invoked from node_save() before the node is saved to the
 * database.
 *
 * @param object $node
 *   The node that is being inserted or updated.
 */
function cu_block_selector_node_presave($node) {
  $selector_types = variable_get('cu_block_selector_types', array());
  // Only touch nodes of type $selector_types.
  if (in_array($node->type, $selector_types)) {
    // If either override right or left is FALSE, inherit left/right field.
    if (isset($node->field_override_sidebar_first[LANGUAGE_NONE]) &&
        !$node->field_override_sidebar_first[LANGUAGE_NONE][0]['value'] ||
        isset($node->field_override_sidebar_second[LANGUAGE_NONE]) &&
        !$node->field_override_sidebar_second[LANGUAGE_NONE][0]['value']) {
      // If plid != 0, then there is a parent.
      if ($node->menu['plid'] != 0) {
        // Find menu links who have a mlid, which match the plid of the node,
        // aka the parents.
        $query = db_select('menu_links', 'ml')
          ->condition('mlid', $node->menu['plid'])
          ->fields('ml', array('mlid', 'link_path'))
          ->execute();
        $parents = array();
        while ($record = $query->fetchAssoc()) {
          $parent_node = menu_get_object('node', 1, $record['link_path']);
          $parents[] = $parent_node;
        }
        // @todo figure outhow to hanlde multiple $parents.

        // If override first is FALSE, set first sidebar to that of paret.
        if (isset($node->field_override_sidebar_first[LANGUAGE_NONE]) &&
            !$node->field_override_sidebar_first[LANGUAGE_NONE][0]['value']) {
          $node->field_sidebar_first = $parent_node->field_sidebar_first;
        }
        // If override second is FALSE, set second sidebar to that of parent.
        if (isset($node->field_override_sidebar_second[LANGUAGE_NONE]) &&
            !$node->field_override_sidebar_second[LANGUAGE_NONE][0]['value']) {
          $node->field_sidebar_second = $parent_node->field_sidebar_second;
        }
      }
      else {
        // If node has no parent, force override both sidebars.
        $node->field_override_sidebar_first[LANGUAGE_NONE][0]['value'] = 1;
        $node->field_override_sidebar_second[LANGUAGE_NONE][0]['value'] = 1;
      }
    }
    // Regardless of what happened above with the parents, we always
    // recurse into the children of this node and update their fields.
    if (!empty($node->menu['mlid'])) {
      _cu_block_selector_recurse_update_fields($node->menu['mlid'], $node);
    }
  }
}

/**
 * Update fields.
 *
 * Dig down the menu system looking for children who have override
 * sidebar set to false. Update their sidebar field to match parent.
 *
 * @param int $mlid
 *   A menu link id
 *
 * @param object $node
 *   A node object
 */
function _cu_block_selector_recurse_update_fields($mlid, $node) {
  $selector_types = variable_get('cu_block_selector_types', array());

  // Find menu links who have this node's mlid set as their parent,
  // aka the children.
  $query = db_select('menu_links', 'ml')
    ->condition('plid', $mlid)
    ->fields('ml', array('mlid', 'link_path'))
    ->execute();
  $children = array();
  while ($record = $query->fetchAssoc()) {
    // Load the child node.
    $child_node = menu_get_object('node', 1, $record['link_path']);
    // We only care about children if node type is within $selector_types.
    if (is_object($child_node) && in_array($child_node->type, $selector_types)) {
      $children[$record['mlid']] = $child_node;
    }
  }
  // For all children nodes (which are of type $selector_types), update fields.
  foreach ($children as $mlid => $child) {
    // Only override child's right sidebar if override field is false.
    $update = FALSE;
    if (isset($child->field_override_sidebar_first[LANGUAGE_NONE]) &&
        !$child->field_override_sidebar_first[LANGUAGE_NONE][0]['value']) {
      // Set the child's sidebar to that of the node being saved.
      $child->field_sidebar_first = $node->field_sidebar_first;
      $update = TRUE;
    }
    // Only override child's left sidebar if override field is false.
    if (isset($child->field_override_sidebar_second[LANGUAGE_NONE]) &&
        !$child->field_override_sidebar_second[LANGUAGE_NONE][0]['value']) {
      // Set the child's sidebar to that of the node being saved.
      $child->field_sidebar_second = $node->field_sidebar_second;
      $update = TRUE;
    }
    // If we've changed a field value, update the node.
    if ($update) {
      // field_attach_update avoids a node_save() which updates revision date.
      field_attach_update('node', $child);
    }

    // If we've come this far, recurse into the children.
    _cu_block_selector_recurse_update_fields($mlid, $child);
  }
}

/**
 * Takes a $bean object and creates a renderable block for placement.
 *
 * @param object $bean
 *   A bean object
 *
 * @param string $region
 *   The region to assign bean to
 *
 * @return array
 *   The converted bean block
 */
function _cu_block_selector_bean_to_block($bean, $region) {
  $block = array();
  if (bean_access('view', $bean)) {
    // Most of this taken from bean_block_view().
    $block['content'] = $bean->view($bean->view_mode);
    $block['subject'] = $bean->title;
    $block['#theme_wrappers'] = array('block');
    $block['#block'] = (object) array(
      'region' => $region,
      'module' => 'bean',
      'delta' => $bean->delta,
      'subject' => $bean->title,
    );
    // Add contextual link to block to edit the bean.
    if (module_exists('contextual')) {
      $block['#contextual_links']['bean'] = array(
        'block',
        array($bean->Identifier()),
      );
      $block['#contextual_links']['block'] = array(
        'admin/structure/block/manage',
        array($block['#block']->module, $block['#block']->delta),
      );

      // If it's a quicktab block, add an additional contextual link
      // and remove bean edit.
      if ($bean->type == 'quicktab') {
        $block['#contextual_links']['quicktabs'] = array(
          'admin/structure/quicktabs/manage',
          array($bean->delta),
        );
        unset($block['#contextual_links']['bean']);
      }
    }
  }
  return $block;
}
function cu_block_selector_field_widget_form_alter(&$element, &$form_state, $context)	{
  $selector_fields = variable_get('cu_block_selector_fields', array());

  if (!empty($element['#field_name']) && (in_array($element['#field_name'], $selector_fields))) {

    // Add 'or' separator between submit actions
    if (isset($element['actions']['ief_add']) && isset($element['actions']['ief_add_existing'])) {
      $element['actions']['ief_add']['#weight'] = 10;
      $element['actions']['ief_add_existing']['#weight'] = 12;
      $element['actions']['ief_separator'] = array(
        '#markup' => '<span class="ief-separator">or</span>',
        '#weight' => 11,
      );

      // Add 'Add New Block' label to available options and add class
      $element['actions']['bundle']['#empty_option'] = t('Add new block');
      //$element['actions']['bundle']['#options']['add_new'] = t('Add new block');
      $element['actions']['bundle']['#attributes']['class'][] = 'new-block-options';
      // Add ajax from submit to select menu

      $element['actions']['bundle']['#ajax'] = $element['actions']['ief_add']['#ajax'];
      $element['actions']['bundle']['#ajax']['event'] = 'change';
      $element['actions']['bundle']['#ajax']['trigger_as'] = array('name' => $element['actions']['ief_add']['#name']);
      // Hide add new submit action
      $element['actions']['ief_add']['#attributes']['class'][] = 'element-invisible';

      $option_array =  $element['actions']['bundle']['#options'];

      // Remove beans where the user isn't specifically allowed to create
      foreach ($option_array as $key => $option) {
        if (!cu_block_selector_bean_access_check($key)) {
          unset($option_array[$key]);
        }
      }
      // Sort bean types by label instead of key/machine name
      asort($option_array);
      $element['actions']['bundle']['#options'] = $option_array;
    }
  }
}
/**
 * Implements hook_form_alter().
 */
function cu_block_selector_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node_edit_form'])) {
    return;
  }

  $selector_types = variable_get('cu_block_selector_types', array());
  $selector_fields = variable_get('cu_block_selector_fields', array());

  // Alter the form if it is a node type we've added block selector to
  if ($form['#node_edit_form'] == TRUE && in_array($form['type']['#value'], $selector_types)) {
    if (arg(2) == 'blocks') {
      // Get non # keys
      $form_fields = array_intersect_key($form, array_flip(element_children($form)));
      // Hide keys that start with field
      foreach ($form_fields as $key =>$field) {
        // Hide all node fields (block selector fields are brought back later on).
        if (substr($key, 0, 6) === 'field_'){
          $form[$key]['#attributes']['class'][] = 'element-hidden';
        }
        // Hide & disable fields on the block selector tab
        drupal_add_css('#edit-body {display:none;}', 'inline');
        $form['title']['#disabled'] = TRUE;

        // Add region layout diagram
        $form['region_layout']['#weight'] = 0;
        $form['region_layout']['#markup'] = _cu_block_selector_region_diagram();
      }
      // Add element-hidden class to node form field groups so they don't display
      // Elements within field groups are already hidden
      foreach ($form['#fieldgroups'] as $key => $field_group) {
        $field_group->format_settings['instance_settings']['classes'] .= ' element-hidden';
      }

      foreach ($selector_fields as $key =>$field) {

        // Make block selector fields visible again.
        if (!empty($form[$key]['#attributes']['class'])) {
          $invisible_key = array_search('element-hidden',  $form[$key]['#attributes']['class']);
        }
        unset($form[$key]['#attributes']['class'][$invisible_key]);

      }
      // Hide inner regions on types where they are unavailable
      $inner_types = array('page', 'article');
      if (!in_array($form['type']['#value'], $inner_types)) {
        $form['field_inner_content_right']['#access'] = FALSE;
        $form['field_inner_content_left']['#access'] = FALSE;
        drupal_add_css(
          'td.inner-left, td.inner-right { display:none; }',
          array(
            'group' => CSS_THEME,
            'type' => 'inline',
            'media' => 'screen',
            'preprocess' => FALSE,
            'weight' => '9999',
          )
        );
      }
      $form['actions']['#access'] = TRUE;

      // Hide vertical tabs
      drupal_add_css('.vertical-tabs {display:none;}', 'inline');
    }
    else {
      // Use css classes to hide block selector fields on node/%/edit
      foreach ($selector_fields as $key =>$field) {
        $form[$key]['#attributes']['class'][] = 'element-hidden';
      }
    }
    // Replace standard show/hide with slideUp/slideDown for #states API.
    $slidejs = "jQuery(document).ready(function(){
      jQuery('form').bind('state:visible', function(e) {
        if (e.trigger) {
          jQuery(e.target).closest('.form-item, .form-submit, .form-wrapper')[e.value ? 'slideDown' : 'fadeOut']();
          e.stopPropagation();
        }
      });
    });";
    drupal_add_js($slidejs, 'inline');

    // Using #states, make sidebar first field only appear if overriden.
    if (isset($selector_fields['field_sidebar_first'], $selector_fields['field_override_sidebar_first'])) {
      $form['field_sidebar_first']['#states'] = array(
        'visible' => array(
          ':input[name="field_override_sidebar_first[und]"]' => array('value' => 1),
        ),
      );
    }

    // Using #states, make sidebar second field only appear if overridden.
    if (isset($selector_fields['field_sidebar_second'], $selector_fields['field_override_sidebar_second'])) {
      $form['field_sidebar_second']['#states'] = array(
        'visible' => array(
          ':input[name="field_override_sidebar_second[und]"]' => array('value' => 1),
        ),
      );
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function cu_block_selector_theme_registry_alter(&$registry) {
  $registry['inline_entity_form_entity_table']['function'] = 'cu_block_selector_inline_entity_form_entity_table';

  // If admintheme is known to have columns and node edit forms use admin theme,
  // Add a preprocess to move selector fields to right sidebar.
  $admin_theme = variable_get('admin_theme', '');
  if (in_array($admin_theme, array('rubik', 'cuseven')) && variable_get('node_admin_theme', 0) == 1) {
    $registry['node_form']['preprocess functions'][] = 'cu_block_selector_preprocess_form_node';
  }
}

/**
 * Preprocess theme('form_node').
 */
function cu_block_selector_preprocess_form_node(&$vars) {
  $selector_types = variable_get('cu_block_selector_types', array());
  $selector_fields = array_keys(variable_get('cu_block_selector_fields', array()));
}

/**
 * Implements hook_entity_info_alter().
 */
function cu_block_selector_entity_info_alter(&$entity_info) {
  if (isset($entity_info['bean'])) {
    $entity_info['bean']['inline entity form']['controller'] = 'BeanInlineEntityFormController';
  }
}

/**
 * Remove $fields instances from $bundle_name.
 */
function _cu_block_selector_remove_field_instances($bundle_name, $fields) {
  // @todo Confirmation before delete, this will remove data.

  $cache = _field_info_field_cache();
  $info = $cache->getBundleInstances('node', $bundle_name);

  foreach ($fields as $field) {
    // Only delete the instance if it exists on this bundle.
    if (isset($info[$field])) {
      // Second argument of FALSE prevents the field from being deleted if no
      // instances exist.
      field_delete_instance($info[$field], FALSE);
    }
  }
}

/**
 * Add $fields instances to $bundle_name.
 */
function _cu_block_selector_add_field_instances($bundle_name, $fields) {
  // Grab $all_fields for instance-specific values (label/required).
  $all_fields = _cu_block_selector_all_fields();
  $cache = _field_info_field_cache();
  $info = $cache->getBundleInstances('node', $bundle_name);

  foreach ($fields as $field_name) {
    if ($field_name !== 0) {
      // Only create the instance if it does not exist on this bundle.
      if (!array_key_exists($field_name, $info)) {
        $instance = array(
          'field_name' => $field_name,
          'bundle' => $bundle_name,
          'entity_type' => 'node',
          'label' => $all_fields[$field_name]['label'],
          'required' => $all_fields[$field_name]['required'],
          'display' => array(
            'default' => array(
              'type' => 'hidden',
            ),
          ),
          'default_value' => isset($all_fields[$field_name]['default_value']) ? $all_fields[$field_name]['default_value'] : '',
          'widget' => array(
            'type' => isset($all_fields[$field_name]['field_widget']) ? $all_fields[$field_name]['field_widget'] : '',
          ),
        );
        if ($instance['widget']['type'] == 'inline_entity_form') {
          // Add specific field instance settings for inline_entity_form.
          $instance['widget']['settings']['type_settings'] = array(
            'allow_existing' => 1,
            'match_operator' => 'CONTAINS',
            'delete_references' => 0,
            'override_labels' => 0,
          );
        }
        field_create_instance($instance);
      }
    }
  }
}

/**
 * TODO: DOCO.
 */
function cu_block_selector_prepare() {
  $default_types = variable_get('cu_block_selector_types', array());
  $default_fields = variable_get('cu_block_selector_fields', array());
  foreach ($default_types as $type) {
    if ($type !== 0) {
      _cu_block_selector_add_field_instances($type, $default_fields);
    }
  }
}

/**
 * Overrides theme_inline_entity_form_entity_table.
 *
 * Direct copy/paste from theme_inline_entity_form_entity_table, with the
 * addition of a small 'hack' for beans to correctly get title/label.
 *
 * @param array $variables
 *   Contains the form element data from $element['entities'].
 */
function cu_block_selector_inline_entity_form_entity_table($variables) {
  $form = $variables['form'];
  $entity_type = $form['#entity_type'];
  $fields = $form['#table_fields'];
  // Sort the fields by weight.
  uasort($fields, 'drupal_sort_weight');
  // If one of the rows is in form context, disable tabledrag.
  $has_tabledrag = TRUE;
  foreach (element_children($form) as $key) {
    if (!empty($form[$key]['form'])) {
      $has_tabledrag = FALSE;
    }
  }

  $header = array();
  if ($has_tabledrag) {
    $header[] = array('data' => '', 'class' => array('ief-tabledrag-header'));
    $header[] = array('data' => t('Sort order'), 'class' => array('ief-sort-order-header'));
  }
  // Add header columns for each field.
  $first = TRUE;
  foreach ($fields as $field_name => $field) {
    $column = array('data' => $field['label']);
    // The first column gets a special class.
    if ($first) {
      $column['class'] = array('ief-first-column-header');
      $first = FALSE;
    }
    $header[] = $column;
  }
  $header[] = t('Operations');

  // Build an array of entity rows for the table.
  $rows = array();
  foreach (element_children($form) as $key) {
    $entity = $form[$key]['#entity'];
    list($entity_id) = entity_extract_ids($entity_type, $entity);
    // Many field formatters (such as the ones for files and images) need
    // certain data that might be missing on unsaved entities because the field
    // load hooks haven't run yet. Because of that, those hooks are invoked
    // explicitly. This is the same trick used by node_preview().
    if ($form[$key]['#needs_save']) {
      _field_invoke_multiple('load', $entity_type, array($entity_id => $entity));
    }

    $row_classes = array('ief-row-entity');
    $cells = array();
    if ($has_tabledrag) {
      $cells[] = array('data' => '', 'class' => array('ief-tabledrag-handle'));
      $cells[] = drupal_render($form[$key]['delta']);
      $row_classes[] = 'draggable';
    }
    // Add a special class to rows that have a form underneath, to allow
    // for additional styling.
    if (!empty($form[$key]['form'])) {
      $row_classes[] = 'ief-row-entity-form';
    }

    // Add fields that represent the entity.
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    foreach ($fields as $field_name => $field) {
      $data = '';
      if ($field['type'] == 'property') {
        // Small 'hack' for beans to correctly get title/label.
        if ($entity_type == 'bean') {
          $data = $entity->{$field_name};
        }
        else {
          $property = $wrapper->{$field_name};
          // label() returns human-readable versions of token and list properties.
          $data = $property->label() ? $property->label() : $property->value();
        }
        $data = check_plain($data);
      }
      elseif ($field['type'] == 'field' && isset($entity->{$field_name})) {
        $display = array(
          'label' => 'hidden',
        ) + $field;
        // The formatter needs to be under the 'type' key.
        if (isset($display['formatter'])) {
          $display['type'] = $display['formatter'];
          unset($display['formatter']);
        }

        $renderable_data = field_view_field($entity_type, $entity, $field_name, $display);
        // The field has specified an exact delta to display.
        if (isset($field['delta'])) {
          if (!empty($renderable_data[$field['delta']])) {
            $renderable_data = $renderable_data[$field['delta']];
          }
          else {
            // The field has no value for the specified delta, show nothing.
            $renderable_data = array();
          }
        }
        $data = drupal_render($renderable_data);
      }

      $cells[] = array('data' => $data, 'class' => array('inline-entity-form-' . $entity_type . '-' . $field_name));
    }
    // Add the buttons belonging to the "Operations" column.
    $cells[] = drupal_render($form[$key]['actions']);
    // Create the row.
    $rows[] = array('data' => $cells, 'class' => $row_classes);

    // If the current entity array specifies a form, output it in the next row.
    if (!empty($form[$key]['form'])) {
      $row = array(
        array('data' => drupal_render($form[$key]['form']), 'colspan' => count($fields) + 1),
      );
      $rows[] = array(
        'data' => $row,
        'class' => array('ief-row-form'),
        'no_striping' => TRUE);
    }
  }

  if (!empty($rows)) {
    $id = 'ief-entity-table-' . $form['#id'];
    if ($has_tabledrag) {
      // Add the tabledrag JavaScript.
      drupal_add_tabledrag($id, 'order', 'sibling', 'ief-entity-delta');
    }

    // Return the themed table.
    $table_attributes = array(
      'id' => $id,
      'class' => array('ief-entity-table'),
    );
    return theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'sticky' => FALSE,
        'attributes' => $table_attributes));
  }
}

/**
 * Make a diagram of block selector regions.
 */
function _cu_block_selector_region_diagram() {
  $html = '<p><strong>Content Regions</strong></p><table id="region-diagram">
  <tr>
    <td colspan="5">Intro Wide</td>
  </tr>
  <tr>
    <td class="fill">&nbsp;</td>
    <td colspan="3">Slider</td>
    <td class="fill">&nbsp;</td>
  </tr>
  <tr>
    <td class="fill">&nbsp;</td>
    <td width="25%">Left Sidebar</td>
    <td>
      <table>
        <tr>
          <td>Above Content</td>
        </tr>
        <tr>
          <td>
            <table>
              <td width="33%" class="inner-left">Inner Left</td>
              <td width="33%"><strong>Main Content</strong></td>
              <td width="33%" class="inner-right">Inner Right</td>
            </table>
          </td>
        </tr>
        <tr>
          <td>Below Content</td>
        </tr>
      </table>
    </td>
    <td width="25%">Right Sidebar</td>
    <td class="fill">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Post Wide</td>
  </tr>
</table>

<style>
  table#region-diagram
  table#region-diagram table {
    border-collapse: collapse;
    table-layout:fixed;
  }
  table#region-diagram td {
    text-align: center;
    padding: 10px;
    border:1px solid #e7e7e7;
  }
  table#region-diagram td.fill {
    background-color:#e7e7e7;
  }
</style>';
  return $html;
}

function cu_block_selector_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'cu_block_selector') . '/cu_block_selector.css');
}

/**
 * Variation of bean_access that only checks create permission
 */
function cu_block_selector_bean_access_check($type) {
  $perm = 'create any ' . $type . ' bean';
  if (user_access($perm)) {
    return TRUE;
  }
}
