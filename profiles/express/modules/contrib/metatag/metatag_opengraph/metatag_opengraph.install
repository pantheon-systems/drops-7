<?php
/**
 * @file
 * Installation and update scripts for Metatag:OpenGraph.
 */

/**
 * Implements hook_requirements().
 */
function metatag_opengraph_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    if (module_exists('rdf')) {
      // Work out the release of D7 that is currently running.
      list($major, $minor) = explode('.', VERSION);
      // Strip off any suffixes on the version string, e.g. "17-dev".
      if (strpos('-', $minor)) {
        list($minor, $suffix) = explode('-', $minor);
      }

      if ($minor < 33) {
        $requirements['metatag_og_rdf'] = array(
          'severity' => REQUIREMENT_WARNING,
          'title' => 'Metatag:OpenGraph',
          'value' => $t('RDF problems with Drupal core releases before v7.33'),
          'description' => $t('The core RDF module in Drupal before v7.33 caused validation problems for Open Graph meta tags. The solution is to update to v7.33 or newer.'),
        );
      }
    }
  }

  return $requirements;
}

/**
 * Implementations of hook_update_N().
 */

/**
 * Enable the new Metatag:Facebook submodule.
 */
function metatag_opengraph_update_7100() {
  module_enable(array('metatag_facebook'));
  drupal_set_message(t('Enabled the new Metatag:Facebook submodule. If the Facebook meta tags are not being used then it is safe to disable.'));
}

/**
 * Leave a warning about the two og:type value changes.
 */
function metatag_opengraph_update_7101() {
  drupal_set_message(t('The "Movie" and "TV Show" values for the "Content type" open graph meta tag changed, if this site used those values they will need to be manually updated.'));
}

/**
 * The Open Graph Products meta tags are now in a new submodule.
 */
function metatag_opengraph_update_7102() {
  drupal_set_message(t('The Open Graph Products meta tags have been moved into the new "Metatag: Open Graph Products" submodule.'));
}

/**
 * Change og:video to og:video:url in all metatags.
 */
function metatag_opengraph_update_7103() {
  // Find all {metatag} records that contained an entry for the old meta tag.
  $records = db_query("SELECT entity_type, entity_id, revision_id, language, data
    FROM {metatag}
    WHERE data LIKE '%og:video%'");
  // This message will be returned if nothing needed to be updated.
  $none_message = t('No Metatag entity records needed to have the "og:video" meta tag renamed.');

  if ($records->rowCount() == 0) {
    drupal_set_message($none_message);
  }
  else {
    $keys = array('entity_type', 'entity_id', 'revision_id', 'language');

    // Loop over the values and correct them.
    $counter = 0;
    foreach ($records as $record) {
      $record->data = unserialize($record->data);
      if (isset($record->data['og:video'])) {
        $record->data['og:video:url'] = $record->data['og:video'];
        unset($record->data['og:video']);
        drupal_write_record('metatag', $record, $keys);

        // Clear the cache for the entity this belongs to.
        entity_get_controller($record->entity_type)->resetCache(array($record->entity_id));

        $counter++;
      }
    }
    if ($counter == 0) {
      drupal_set_message($none_message);
    }
    else {
      drupal_set_message(t('Converted the "og:video" meta tag for @count entity records to "og:video:url" meta tag. Now we are up to date with Facebook specs.', array('@count' => $counter)));
    }
  }
}

/**
 * Rename the 'og:video' meta tag to 'og:video:url' in the configs.
 */
function metatag_opengraph_update_7104() {
  // Find all {metatag_config} records that contained an entry for the old meta
  // tag.
  $records = db_query("SELECT cid, config
    FROM {metatag_config}
    WHERE config LIKE '%og:video%'");
  // This message will be returned if nothing needed to be updated.
  $none_message = t('No Metatag configuration records needed to have the "og:video" meta tag fixed. That said, there may be other configurations elsewhere that do need updating.');

  // Loop over the values and correct them.
  if ($records->rowCount() == 0) {
    drupal_set_message($none_message);
  }
  else {
    $keys = array('cid');

    // Loop over the values and correct them.
    $counter = 0;
    foreach ($records as $record) {
      $record->config = unserialize($record->config);
      if (isset($record->config['og:video'])) {
        $record->config['og:video:url'] = $record->config['og:video'];
        unset($record->config['og:video']);
        drupal_write_record('metatag_config', $record, $keys);
        $counter++;
      }
    }
    if ($counter == 0) {
      drupal_set_message($none_message);
    }
    else {
      drupal_set_message(t('Converted the "og:video" meta tag for @count configurations to the new "og:video:url" meta tag. Now we are up-to-date..', array('@count' => $counter)));
    }
  }
}

/**
 * Clear the Metatag cache to pick up changes to og:video.
 */
function metatag_opengraph_update_7105() {
  cache_clear_all('*', 'cache_metatag', TRUE);
  return t('All Metatag caches cleared.');
}

/**
 * Clear the Metatag cache to pick up changes to og:audio:secure_url.
 */
function metatag_opengraph_update_7106() {
  cache_clear_all('*', 'cache_metatag', TRUE);
  return t('All Metatag caches cleared.');
}
