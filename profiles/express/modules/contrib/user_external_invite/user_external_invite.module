<?php

/**
 * @file
 * Invites a user to site when connecting via external protocol e.g. LDAP.
 */

/**
 * Implements hook_entity_info().
 */
function user_external_invite_entity_info() {

  $info = array();

  $info['ext-invite'] = array(
    'label' => t('Invite'),
    'base table' => 'user_external_invite',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'mail',
    ),
    'module' => 'user_external_invite',
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function user_external_invite_permission() {
  return array(
    'invite new user' => array(
      'title' => 'Invite new user',
      'restrict access' => TRUE,
      'description' => 'Allow access to send invitation email',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function user_external_invite_menu() {
  $items = array();
  $items['admin/config/people/invite'] = array(
    'title' => 'User external invite settings',
    'description' => 'Configure roles, email addresses, message templates, etc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_external_invite_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/people/invite'] = array(
    'title' => 'Invite user',
    'page callback' => 'user_external_invite_page',
    'page arguments' => array('user_external_invite_form'),
    'access callback' => 'user_external_invite_form_access',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/people/invite/cancel/%'] = array(
    'title' => 'Cancel user invite',
    'page callback' => 'user_external_invite_cancel_invite',
    'access callback' => 'user_external_invite_form_access',
    'page arguments' => array(4),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user-external/accept-invite'] = array(
    'title' => 'Accept an invite',
    'page callback' => 'user_external_invite_accept_invite',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Configuration form for the module.
 */
function user_external_invite_settings_form() {
  $form = array();
  $form['#validate'][] = 'user_external_invite_settings_form_validate';
  // Roles that users can have.
  $form['user_external_invite_roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles users can be invited to join'),
    '#description' => t('Users with permission to send invites will be able to invite users to join a site with any of these roles.  GRANT WITH CAUTION!'),
    '#options' => user_roles(),
    '#default_value' => variable_get('user_external_invite_roles', NULL),
    '#multiple' => TRUE,
  );

  // Days invite valid for.
  $form['user_external_invite_days_valid_for'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days invites are valid for'),
    '#default_value' => variable_get('user_external_invite_days_valid_for', 5),
    '#maxlength' => 3,
  );

  // From email address.
  $form['user_external_invite_use_universal_from_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send all invites from a single email address'),
    '#description' => t('If this is not configured, invites will be sent using the email address of the user sending the invite.'),
    '#default_value' => variable_get('user_external_invite_use_universal_from_email', FALSE),
  );

  $form['user_external_invite_universal_from_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address invites are sent from'),
    '#default_value' => variable_get('user_external_invite_universal_from_email', NULL),
    '#maxlength' => 256,
    '#states' => array(
      'visible' => array(
        ':input[name="user_external_invite_use_universal_from_email"]' => array('checked' => TRUE),
        'required' => array(
          ':input[name="user_external_invite_use_universal_from_email"]' => array('checked' => TRUE),
        ),
      ),
    ),
  );

  // Message templates.
  $form['user_external_invite_invite_template'] = array(
    '#title' => t('Invitation Email Template'),
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 5,
    '#default_value' => variable_get('user_external_invite_invite_template'),
    '#description' => t('Message sent to user being invited.'),
  );

  $form['user_external_invite_confirmation_template'] = array(
    '#title' => t('Invitation Confirmation'),
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 5,
    '#default_value' => variable_get('user_external_invite_confirmation_template'),
    '#description' => t('Confirmation message sent to user who initiated the invivation confirming the invitation was sent.'),
  );

  $form['user_external_invite_accepted_template'] = array(
    '#title' => t('Invitation Accepted Email Template'),
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 5,
    '#default_value' => variable_get('user_external_invite_accepted_template'),
    '#description' => t('Message sent to user who initiated the invivation when the user accepts an invite.'),
  );

  $form['user_external_invite_accepted_confirmation_template'] = array(
    '#title' => t('Invitation Accepted Confirmation Email Template'),
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 5,
    '#default_value' => variable_get('user_external_invite_accepted_confirmation_template'),
    '#description' => t('Message sent to user being invited confirming the process was completed.'),
  );

  // @TODO: add warning email about expiring invititations.
  $form['token_help']['content'] = array(
    '#type' => 'markup',
    '#token_types' => 'all',
    '#theme' => 'token_tree',
  );

  return system_settings_form($form);
}

/**
 * Form validation handler for user external invite settings form.
 */
function user_external_invite_settings_form_validate($form, &$form_state) {
  // Only validate the email if it is being used.
  if ($form_state['values']['user_external_invite_use_universal_from_email']) {
    if (valid_email_address($form_state['values']['user_external_invite_universal_from_email'])) {
      return;
    }
    form_set_error('user_external_invite_universal_from_email', t('Invalid email.'));
  }
}

/**
 * Page callback for admin/people/invite/cancel/%.
 *
 * Cancels a invite.
 */
function user_external_invite_cancel_invite($mail) {
  // @todo verify $mail is valid and invite currently exists.
  _user_external_invite_remove_invite($mail);
  drupal_set_message(t('Invite for !mail successfully canceled.', array('!mail' => $mail)));
  drupal_goto('admin/people/invite');
}

/**
 * Access callback for admin/people/invite.
 *
 * For some reason, simply using a callback of 'user_access()' was not working.
 */
function user_external_invite_form_access() {
  if (user_access('invite new user')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for admin/people/invite.
 */
function user_external_invite_page() {
  $build['form'] = drupal_get_form('user_external_invite_form');
  $build['invites'] = _user_external_invite_pending_invites_table();
  return $build;
}

/**
 * Get and return pending invites.
 */
function _user_external_invite_pending_invites(string $mail = NULL) {
  $query = db_select('user_external_invite', 'i')
    ->fields('i');
  if ($mail) {
    $query->condition('mail', $mail);
  }
  $record = $query->execute()->fetchAll();
  return $record;
}

/**
 * Build table showing pending invites.
 */
function _user_external_invite_pending_invites_table() {
  $build = array();
  $pending = _user_external_invite_pending_invites();
  if (!empty($pending)) {
    $build['title']['#markup'] = '<h2>Pending Invites</h2>';
    $build['table']['#theme'] = 'table';
    $build['table']['#header'] = array(
      t('Email'),
      t('Role'),
      t('Expires'),
      t('Inviter'),
      t('Actions'),
    );

    $rids = variable_get('user_external_invite_roles', NULL);

    foreach ($rids as $rid) {
      $roles[$rid] = _user_external_invite_role_name_from_rid($rid);
    }

    foreach ($pending as $r) {
      $inviter = user_load($r->uid);
      $rows[] = array(
        $r->mail,
        $roles[$r->rid],
        format_date($r->expire, 'short'),
        $inviter->mail,
        l(t('Cancel invite'), 'admin/people/invite/cancel/' . $r->mail),
      );
    }
    $build['table']['#rows'] = $rows;
  }
  return $build;
}

/**
 * Form to invite a new user as a site owner or content editor.
 */
function user_external_invite_form($form, &$form_state) {

  drupal_set_title('Invite New User');

  $rids = variable_get('user_external_invite_roles', NULL);

  foreach ($rids as $rid) {
    $role_options[$rid] = _user_external_invite_role_name_from_rid($rid);
  }

  $form['rid'] = array(
    '#title' => t('Role'),
    '#type' => 'radios',
    '#options' => $role_options,
    '#default_value' => $rids[0],
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#title' => t('Email addresses'),
    '#type' => 'textarea',
    '#description' => t('Comma separated list of email addresses that are sent the invitation email.'),
    '#required' => TRUE,
  );

  $form['custom_message'] = array(
    '#title' => t('Custom message'),
    '#type' => 'textarea',
    '#cols' => 40,
    '#rows' => 5,
    '#description' => t('If added, the custom message will be included before the standard template.  Can be left blank.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Validation handler for invite_form.
 *
 * Ensures email addresses are in valid format.
 */
function user_external_invite_form_validate(&$form, &$form_state) {
  $email_value = $form_state['values']['email'];
  // Split on , or line break.
  $emails = preg_split("/[\r\n,\s]+/", $email_value, -1, PREG_SPLIT_NO_EMPTY);
  $error = FALSE;
  foreach ($emails as $mail) {
    if (!valid_email_address($mail)) {
      $error = TRUE;
      form_set_error('email', t('Incorrect email address (%mail). No invites were sent.', array('%mail' => $mail)));
    }
    else {
      $load = _user_external_invite_load_invite($mail);
      if (isset($load['mail'])) {
        form_set_error('email', t('Email address (%mail) has already been invited. No invites were sent.', array('%mail' => $mail)));
      }
    }
  }
  if (!$error) {
    $form_state['values']['parsed_mails'] = $emails;
  }
}

/**
 * Submit handler for invite_form.
 *
 * Add entry to database and send email.
 */
function user_external_invite_form_submit(&$form, &$form_state) {
  global $user;
  _user_external_invite_add_invite($form_state['values']['rid'], $form_state['values']['parsed_mails'], $user->uid, $form_state['values']['custom_message']);
  drupal_set_message(t('Successfully invited new user!'));
}

/**
 * Adds invite to database and sends email.
 */
function _user_external_invite_add_invite($rid, $emails, $uid, $message = NULL) {
  // @TODO: add custom message handling
  $now = REQUEST_TIME;
  $days = variable_get('user_external_invite_days_valid_for', 5);
  // Expire in X days.
  $expire = $now + ($days * 24 * 60 * 60);
  foreach ($emails as $mail) {
    db_insert('user_external_invite')
      ->fields(array(
        'mail' => $mail,
        'rid' => $rid,
        'expire' => $expire,
        'uid' => $uid,
        'message' => $message,
      ))
      ->execute();
    // Now send the email.
    _user_external_invite_send_invite($rid, $mail, $expire, $uid);
  }
  // After all emails are sent, send confirmation to submitter.
  global $user;
  $site_name = _user_external_invite_site_name();
  $from = _user_external_invite_from_email();
  $params = array(
    'subject' => t('Access request for the !site_name website', array('!site_name' => $site_name)),
    'rid' => $rid,
    'role_name' => _user_external_invite_role_name_from_rid($rid),
    'body' => token_replace(variable_get('user_external_invite_confirmation_template'), array('ext-invite' => _user_external_invite_load_entity($emails[0]))),
    'site_name' => $site_name,
  );

  // @TODO: use universal email?
  drupal_mail('user_external_invite', 'user_external_invite_sent', $user->mail, language_default(), $params, $from, TRUE);
}

/**
 * Sends email with special token-login link.
 */
function _user_external_invite_send_invite($rid, $email, $expire, $uid) {
  $hash = _user_external_invite_calculate_hash($rid, $email, $expire);
  _user_external_invite_send_invite_mail($rid, $email, $expire, $hash, $uid);
}

/**
 * Calculates the token based on $rid, $email, and $expire.
 */
function _user_external_invite_calculate_hash($rid, $email, $expire) {
  $hash = drupal_hmac_base64('user_rid:' . $rid . ',user_mail:' . $email, drupal_get_hash_salt() . $email . $expire);
  return $hash;
}

/**
 * Returns from address used to send mailing.
 *
 * @param int $uid
 *   User ID being invited.
 */
function _user_external_invite_from_email($uid = NULL) {
  // Needs to be configurable.
  if (variable_get('user_external_invite_use_universal_from_email', NULL)) {
    return variable_get('user_external_invite_universal_from_email', NULL);
  }
  else {
    $user = user_load($uid);
    return $user->mail;
  }

}

/**
 * Get role name from role ID.
 */
function _user_external_invite_role_name_from_rid($rid) {
  $user_role = user_role_load($rid);

  // Format role name to be  more readable.
  $role_name = $user_role->name;
  $role_name = ucwords(str_replace('_', ' ', $role_name));

  return $role_name;
}

/**
 * Return site name.
 */
function _user_external_invite_site_name() {
  return variable_get('site_name', '');
}

/**
 * Sends invitation email with token login link.
 */
function _user_external_invite_send_invite_mail($rid, $mail, $expire, $hash, $uid) {
  $from = _user_external_invite_from_email();
  $link = url('user-external/accept-invite', array(
    'query' => array(
      'key' => $hash,
      'mail' => $mail,
    ),
    'absolute' => TRUE,
  ));
  $role_name = _user_external_invite_role_name_from_rid($rid);
  $site_name = _user_external_invite_site_name();
  $params = array(
    'token' => $hash,
    'rid' => $rid,
    'role_name' => $role_name,
    'expire' => $expire,
    'link' => $link,
    'uid' => $uid,
    'site_name' => $site_name,
    'subject' => t('Invitation to access the !site_name website', array('!site_name' => $site_name)),
    'body' => token_replace(variable_get('user_external_invite_invite_template'),
      array('ext-invite' => _user_external_invite_load_entity($mail))),
  );

  // Send mail to user who was invited.
  drupal_mail('user_external_invite', 'user_external_invite_token', $mail, language_default(), $params, $from, TRUE);
}

/**
 * Sends accepted invitation email with login link and extra help.
 */
function _user_external_invite_send_invite_accepted_mail($rid, $mail) {
  $from = _user_external_invite_from_email();
  $link = url('user/login', array(
    'absolute' => TRUE,
  ));
  $role_name = _user_external_invite_role_name_from_rid($rid);
  $site_name = _user_external_invite_site_name();
  $params = array(
    'rid' => $rid,
    'role_name' => $role_name,
    'link' => $link,
    'site_name' => $site_name,
    'subject' => t('Access confirmation for the !site_name website', array('!site_name' => $site_name)),
    'body' => token_replace(variable_get('user_external_invite_accepted_confirmation_template'),
      array('ext-invite' => _user_external_invite_load_entity($mail))),
  );
  drupal_mail('user_external_invite', 'user_external_invite_accepted', $mail, language_default(), $params, $from, TRUE);
}

/**
 * Sends confirmation to inviter that the invite was sent out.
 *
 * @param int $uid
 *   Uid of user who sent the invite.
 * @param string $mail
 *   Email address of user who was invited.
 * @param int $rid
 *   Role id that was granted.
 */
function _user_external_invite_send_inviter_confirmation($uid, $mail, $rid) {
  $account = user_load($uid);
  $from = _user_external_invite_from_email();
  $role_name = _user_external_invite_role_name_from_rid($rid);
  $site_name = _user_external_invite_site_name();
  $params = array(
    'rid' => $rid,
    'role_name' => $role_name,
    'site_name' => $site_name,
    'invite' => $mail,
    'subject' => t('Access request confirmation'),
    'body' => token_replace(variable_get('user_external_invite_accepted_template'),
      array('ext-invite' => _user_external_invite_load_entity($mail))),
  );
  drupal_mail('user_external_invite', 'user_external_invite_confirmation', $account->mail, language_default(),
    $params, $from, TRUE);
}

/**
 * Implements hook_mail().
 */
function user_external_invite_mail($key, &$message, $params) {
  switch ($key) {
    // Invite email.
    case 'user_external_invite_token':
      $message['body'] = array();
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;

    case 'user_external_invite_sent':
      $message['body'] = array();
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;

    case 'user_external_invite_accepted':
      $message['body'] = array();
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;

    case 'user_external_invite_confirmation':
      $message['body'] = array();
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;

  }
}

/**
 * Page callback for accepting an invite.
 *
 * If logged in, checks invite token and grants role, sends to user page.
 * If not logged in, sends to user/login with correct params to grant role on
 * successful login.
 */
function user_external_invite_accept_invite() {
  if (isset($_GET['key']) && isset($_GET['mail'])) {
    if (user_is_logged_in()) {
      global $user;
      user_external_invite_grant_invite($_GET['key'], $_GET['mail'], $user);
      drupal_goto('user');
    }
    else {
      drupal_goto('user/login', array(
        'query' => array(
          'key' => $_GET['key'],
          'mail' => $_GET['mail'],
        ),
      ));
    }
  }
}

/**
 * Grants an invite given a token and mail.
 *
 * Checks invite key+mail token is valid,
 * Grants role, sends emails, and removes invite from db.
 */
function user_external_invite_grant_invite($key, $mail, $account) {
  $grant_rid = _user_external_invite_dehash($key, $mail);

  if ($grant_rid) {
    // Check to see if the user already has the role.  Because the email
    // Used in the invite is not always = to LDAP, they could already be
    // In the role.
    global $user;
    $role = user_role_load($grant_rid);
    if (in_array($role->name, $user->roles)) {
      return;
    }
    db_insert('users_roles')
      ->fields(array(
        'uid' => $account->uid,
        'rid' => $grant_rid,
      ))
      ->execute();
    // Send acceptance email.
    _user_external_invite_send_invite_accepted_mail($grant_rid, $account->mail);

    // Load the invite to send email to inviter.
    $invite = _user_external_invite_load_invite($mail);

    // Send email to inviter.
    _user_external_invite_send_inviter_confirmation($invite['uid'], $invite['mail'], $invite['rid']);

    // Once granted, remove entry from database.
    _user_external_invite_remove_invite($mail);
  }
  else {
    drupal_set_message(
      t('Invite invalid or has expired! If you feel you have received this in error, please contact a site owner.'),
      'error');
  }
}

/**
 * Loads external invite from entity from email.
 */
function _user_external_invite_load_entity($mail) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'ext-invite')
    ->propertyCondition('mail', $mail);

  $result = $query->execute();

  if ($result['ext-invite']) {
    $id = array_pop($result['ext-invite']);
    return entity_load_single('ext-invite', $id->id);
  }
}

/**
 * Implements hook_user_login().
 *
 * Upon successful login, if key and mail are set, grant role.
 */
function user_external_invite_user_login(&$edit, $account) {
  if (isset($_GET['key']) && isset($_GET['mail'])) {
    user_external_invite_grant_invite($_GET['key'], $_GET['mail'], $account);
    drupal_goto('user');
  }
}

/**
 * Loads an invite.
 *
 * @param string $mail
 *   Email address used for loading invite.
 *
 * @return mixed $query
 *   Full invite being loaded.
 */
function _user_external_invite_load_invite($mail) {
  return db_select('user_external_invite', 'i')
    ->fields('i')
    ->condition('mail', $mail)
    ->execute()
    ->fetchAssoc();
}

/**
 * Remove invite row from {user_external_invite}.
 *
 * Called after invite has been used, or on cron after expiration.
 */
function _user_external_invite_remove_invite($mail) {
  db_delete('user_external_invite')
    ->condition('mail', $mail)
    ->execute();
}

/**
 * Determine whether invite is accepted based on hash.
 *
 * Given a key-token and mail, calculate expected hash, if same as key,
 * return $rid of role to be granted.
 */
function _user_external_invite_dehash($key, $mail) {
  $result = db_select('user_external_invite', 'i')
    ->fields('i')
    ->condition('mail', $mail)
    ->execute()
    ->fetchAssoc();
  if ($result['expire'] < REQUEST_TIME) {
    // Token has expired.
    // @todo: need a better error here.
    return FALSE;
  }
  $expected_hash = _user_external_invite_calculate_hash($result['rid'], $result['mail'], $result['expire']);
  if ($key == $expected_hash) {
    drupal_set_message(t('Invite accepted!'));
    return $result['rid'];
  }
  return FALSE;
}

/**
 * Implements hook_cron().
 */
function user_external_invite_cron() {
  // Delete expired invites.
  $query = db_delete('user_external_invite')
    ->condition('expire', REQUEST_TIME, '<');
  $query->execute();
}

/**
 * Implements hook_token_info().
 */
function user_external_invite_token_info() {
  $types['user_external_invite'] = array(
    'name' => t("User External Invite"),
    'description' => t("Tokens for User External Invite."),
  );
  $info['invite_link'] = array(
    'name' => t('Invitation Link'),
    'description' => t('Returns the link with query string for this invite'),
  );
  $info['invite_role'] = array(
    'name' => t('Invitation Role'),
    'description' => t('Returns the Role for the invite'),
  );
  $info['invited_email'] = array(
    'name' => t('Email of Invite'),
    'description' => t('Returns the email for the invite'),
  );
  $info['invited_emails'] = array(
    'name' => t('Emails of Invitees'),
    'description' => t('Returns the emails of users who where invited at the same time'),
  );
  $info['invite_custom'] = array(
    'name' => t('Custom Message'),
    'description' => t('Returns custom message for the invite'),
  );
  return array(
    'types' => $types,
    'tokens' => array(
      'user_external_invite' => $info,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function user_external_invite_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();
  if ($type == 'user_external_invite') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'invite_role':
          $name = _user_external_invite_role_name_from_rid($data['ext-invite']->rid);
          $replacements[$original] = $name;
          break;

      }

      switch ($name) {
        case 'invite_link':
          $hash = _user_external_invite_calculate_hash($data['ext-invite']->rid, $data['ext-invite']->mail, $data['ext-invite']->expire);
          $link = url('user-external/accept-invite', array(
            'query' => array(
              'key' => $hash,
              'mail' => $data['ext-invite']->mail,
            ),
            'absolute' => TRUE,
          ));
          $replacements[$original] = $link;
          break;

        case 'invited_email':
          $replacements[$original] = $data['ext-invite']->mail;
          break;

        case 'invited_emails':
          $replacements[$original] = _user_external_invite_load_related_invites($data['ext-invite']);
          break;

        case 'invite_custom':
          $replacements[$original] = $data['ext-invite']->message;
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Load invites that were invited at the same time.
 */
function _user_external_invite_load_related_invites($entity) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'ext-invite')
    ->propertyCondition('expire', $entity->expire);

  $result = $query->execute();
  $entities = entity_load('ext-invite', array_keys($result['ext-invite']));

  $emails = '';
  foreach ($entities as $entity) {
    $emails .= $entity->mail . "\r\n";
  }

  return $emails;
}
