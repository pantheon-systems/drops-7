<?php
/**
 * @file
 * Adds inline help to Web Express.
 */

/**
 * Implements hook_menu().
 */
function express_help_menu() {
  $items['admin/express/help'] = array(
    'title' => 'Web Express Help',
    'page callback' => '_express_help_list',
    'access arguments' => array('administer nodes'),
    'weight' => 500,
    'type' => MENU_CALLBACK,
  );
  $items['admin/express/help/view'] = array(
    'title' => 'Web Express Help',
    'type' => MENU_CALLBACK,
  );
  $items['admin/express/help/admin'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Web Express Help Admin',
    'page callback' => '_express_help_list_admin',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/system/express-help'] = array(
    'title' => 'Express Help',
    'description' => 'Configure Express Help',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_help_admin_settings'),
    'file' => 'express_help.admin.inc',
    'access arguments' => array('administer modules'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function express_help_menu_alter(&$items) {
  // Send user to express help page instead of default help page
  // $items['admin/help']['page callback'] = 'drupal_goto';
  // $items['admin/help']['page arguments'] = array( 'admin/express/help');
  unset($items['admin/help']);
}

/**
 * Implements hook_navbar().
 */
function express_help_navbar() {
  $items = array();
  // responsive_preview has a weight of 200 and right aligned
  // Help needs to be to the left of that?
  $items['express_help'] = array(
    '#type' => 'navbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Help'),
      '#href' => 'http://colorado.edu/webcentral',
      '#options' => array(
        'html' => TRUE,
        'attributes' => array(
          'title' => t('Web Express Help'),
          'class' => array('navbar-icon navbar-icon-help'),
          'target' => '_blank',
        ),
      ),
    ),
    '#weight' => 100,
    '#wrapper_attributes' => array(
      'class' => array('pull-right'),
    ),
  );

  return $items;
}

/**
 * Callback function for admin/express/help.
 */
function _express_help_list() {
  $output = array();
  // Get page/screen help.
  if ($cache = cache_get('express_help_links')) {
    $express_help = $cache->data;
  }
  else {
    $express_help = module_invoke_all('express_help', $variables = NULL);
    // Save this for 30 days - it should only be cleared on a code update.
    cache_set('express_help_links', $express_help, 'cache', time() + 60 * 60 * 24 * 30);
  }
  // Get form/field help.
  if ($cache = cache_get('express_help_field_links')) {
    $help_fields = $cache->data;
  }
  else {
    $help_fields = module_invoke_all('express_help_fields', $variables = NULL);
    // Save this for 30 days - it should only be cleared on a code update.
    cache_set('express_help_field_links', $help_fields, 'cache', time() + 60 * 60 * 24 * 30);
  }

  $help_list = array(
    'items' => array(),
    // Leave the title element empty to omit the ul title.
    'title' => '',
    'type' => 'ul',
    'attributes' => array(
      'class' => array(
        'help-list',
      ),
    ),
  );

  $base_help_url = variable_get('express_help_base_url', 0);

  foreach ($express_help as $help) {
    foreach ($help as $key => $value) {
      $help_list['items'][$value['short_title']] = l($value['short_title'], $base_help_url . $value['url'], array('attributes' => array('target' => '_blank'))) . " <small>(" . $value['module'] . ')</small>';
    }
  }

  foreach ($help_fields as $form_id => $form) {
    foreach ($form['fields'] as $field_name => $field) {
      $help_list['items'][$field['short_title']] = l($field['short_title'], $base_help_url . $field['url'], array('attributes' => array('target' => '_blank'))) . " <small>(" . $field['module'] . ')</small>';
    }
  }

  ksort($help_list['items']);
  $output['list']['#markup'] = theme('item_list', $help_list);
  $output['more']['#markup'] = l(t('Find more Express help at: !base_url', array('!base_url' => $base_help_url)), $base_help_url, array(
    'attributes' => array(
      'target' => '_blank',
      'class' => array('help-more-link')
    )
  ));
  $output['more']['#prefix'] = '<p>';
  $output['more']['#suffix'] = '</p>';
  return $output;
}

/**
 * Callback function for admin/express/help/admin.
 */
function _express_help_list_admin() {
  $modules_page_help = module_implements('express_help');
  $modules_field_help = module_implements('express_help_fields');
  $files = system_rebuild_module_data();
  // Do page/screen level help first.
  $items = array();
  foreach ($modules_page_help as $module) {
    $items[] = check_plain($files[$module]->info['name']);
  }

  $output['page_help']['#markup'] = theme('item_list', array('items' => $items));
  $output['page_help']['#prefix'] = t('<strong>These modules provide page/screen level help:</strong>');

  // Now do field/fieldset level help.
  $items = array();
  foreach ($modules_field_help as $module) {
    $items[] = check_plain($files[$module]->info['name']);
  }
  $output['field_help']['#markup'] = theme('item_list', array('items' => $items));
  $output['field_help']['#prefix'] = t('<strong>These modules provide field/fieldset level help:</strong>');
  return $output;
}

/**
 * Implements hook_preprocess_page().
 */
function express_help_preprocess_page(&$vars) {

  // Get help paths from cache.
  if ($cache = cache_get('express_help_links')) {
    $express_help = $cache->data;
  }
  else {
    $express_help = module_invoke_all('express_help', $variables = NULL);
    // Save this for 30 days - it should only be cleared on a code update.
    cache_set('express_help_links', $express_help, 'cache', time() + 60 * 60 * 24 * 30);
  }

  // Match router items to correct help links.
  $router_item = menu_get_item(current_path());
  $current_path = $router_item['path'];

  // Need to deal with node/%/edit paths.
  if ((arg(0) == 'node') && (arg(2) == 'edit')) {
    $node_type = str_replace('_', '-', $vars['node']->type);
    $current_path = 'node/add/' . $node_type;
  }

  // Need to deal with block%/edit paths.
  if (arg(0) == 'block' && arg(2) == 'edit') {
    $bean_type = str_replace('_', '-', $vars['page']['content']['system_main']['bean']['#value']->type);
    $current_path = 'block/edit/' . $bean_type;
  }

  // If there is a $key for the current path, add the help link variable.
  if (array_key_exists($current_path, $express_help)) {
    $vars['express_help'] = '';
    foreach ($express_help[$current_path] as $key => $value) {
      $title = $value['title'];
      $url = $value['url'];

      // Add base url if url is a fragment/relative.
      $parsed_url = parse_url($url);
      if (!in_array('host', $parsed_url) && $base_help_url = variable_get('express_help_base_url', 0)) {
        // Add beginning slash if not one there.
        if (substr($parsed_url['path'], 0, 1) != '/') {
          $parsed_url['path'] = '/' . $parsed_url['path'];
        }
        $url = $base_help_url . $parsed_url['path'];
      }

      if (isset($title) && isset($url)) {
        $help_link = l($title, $url, array('attributes' => array('target' => '_blank')));
        $vars['express_help'] .= $help_link . '<br/>';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function express_help_form_alter(&$form, &$form_state, $form_id) {
  // Get help paths from cache.
  if ($cache = cache_get('express_help_field_links')) {
    $help_fields = $cache->data;
  }
  else {
    $combined_keys = array();
    // Get all help field hooks.
    $help_fields = module_invoke_all('express_help_fields', $variables = NULL);
    foreach ($help_fields as $key => $help_field) {
      // Check for combined form keys.
      if (strpos($key, ',') !== FALSE) {
        $fields = $help_field['fields'];
        // Save combined keys so we can remove them later.
        $combined_keys[] = $key;
        $form_keys = array();
        $form_keys = explode(',', $key);
        foreach ($form_keys as $form_key) {
          // If form already has some field help, merge them.
          if (!empty($help_fields[$form_key])) {
            $help_fields[$form_key]['fields'] = array_merge($help_fields[$form_key]['fields'], $fields);
          }
          else {
            $help_fields[$form_key]['fields'] = $fields;
          }
        }
      }
    }
    // Remove combined keys because we don't need them anymore.
    foreach ($combined_keys as $combined_key) {
      unset($help_fields[$combined_key]);
    }
    // Save this for 30 days - it should only be cleared on a code update.
    cache_set('express_help_field_links', $help_fields, 'cache', time() + 60 * 60 * 24 * 30);
  }

  // If the form_id is a key in our field help array, proceed with alter.
  if (array_key_exists($form_id, $help_fields)) {
    foreach ($form as $key => $field) {
      if (!empty($help_fields[$form_id]['fields'][$key])) {

        // Add base url if url is a fragment/relative.
        $url = $help_fields[$form_id]['fields'][$key]['url'];
        $parsed_url = parse_url($url);
        if (!in_array('host', $parsed_url) && $base_help_url = variable_get('express_help_base_url', 0)) {
          // Add beginning slash if not one there.
          if (substr($parsed_url['path'], 0, 1) != '/') {
            $parsed_url['path'] = '/' . $parsed_url['path'];
          }
          $url = $base_help_url . $parsed_url['path'];
        }

        $help_link = l('<span class="element-invisible1">' . $help_fields[$form_id]['fields'][$key]['title'] . '</span>', $url, array(
            'attributes' => array(
              'target' => '_blank',
              'class' => 'field-help-link'
            ),
            'html' => TRUE
          )
        );
        // If description is set at this level (i.e. a fieldset), add help.
        if ($form[$key]['#type'] == 'fieldset') {
          if (isset($form[$key]['#description'])) {
            $form[$key]['#description'] = $form[$key]['#description'] . ' ' . $help_link;
          }
          else {
            $form[$key]['#description'] = $help_link;
          }
        }
        // Otherwise add help here.
        else {
          if (isset($form[$key][LANGUAGE_NONE][0]['#description'])) {
            $form[$key][LANGUAGE_NONE][0]['#description'] = $form[$key][LANGUAGE_NONE][0]['#description'] . ' ' . $help_link;
          }
          else {
            $form[$key][LANGUAGE_NONE][0]['#description'] = $help_link;
          }
          if (isset($form[$key][LANGUAGE_NONE]['#description'])) {
            $form[$key][LANGUAGE_NONE]['#description'] = $form[$key][LANGUAGE_NONE]['#description'] . ' ' . $help_link;
          }
          else {
            $form[$key][LANGUAGE_NONE]['#description'] = $help_link;
          }
          if (isset($form[$key]['#description'])) {
            $form[$key]['#description'] = $form[$key]['#description'] . ' ' . $help_link;
          }
          else {
            $form[$key]['#description'] = $help_link;
          }
        }
      }
    }
  }
}
