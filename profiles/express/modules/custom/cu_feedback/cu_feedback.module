<?php

/**
 * @file
 * Feedback module.
 */

/**
 * Define user permissions.
 *
 * This hook can supply permissions that the module defines, so that they
 * can be selected on the user permissions page and used to grant or restrict
 * access to actions the module performs.
 *
 * Permissions are checked using user_access().
 *
 * For a detailed usage example, see page_example.module.
 *
 * @return array
 *   An array whose keys are permission names and whose corresponding values
 *   are arrays containing the following key-value pairs:
 *   - title: The human-readable name of the permission, to be shown on the
 *     permission administration page. This should be wrapped in the t()
 *     function so it can be translated.
 *   - description: (optional) A description of what the permission does. This
 *     should be wrapped in the t() function so it can be translated.
 *   - restrict access: (optional) A boolean which can be set to TRUE to
 *     indicate that site administrators should restrict access to this
 *     permission to trusted users. This should be used for permissions that
 *     have inherent security risks across a variety of potential use cases
 *     (for example, the "administer filters" and "bypass node access"
 *     permissions provided by Drupal core). When set to TRUE, a standard
 *     warning message defined in user_admin_permissions() and output via
 *     theme_user_permission_description() will be associated with the
 *     permission and displayed with it on the permission administration page.
 *     Defaults to FALSE.
 *   - warning: (optional) A translated warning message to display for this
 *     permission on the permission administration page. This warning overrides
 *     the automatic warning generated by 'restrict access' being set to TRUE.
 *     This should rarely be used, since it is important for all permissions to
 *     have a clear, consistent security warning that is the same across the
 *     site. Use the 'description' key instead to provide any information that
 *     is specific to the permission you are defining.
 *
 * @see theme_user_permission_description()
 */
function cu_feedback_permission() {
  return array(
    'administer cu feedback module' => array(
      'title' => 'Administer CU Feedback Module',
      'description' => 'Access admin/settings to configure feedback form',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cu_feedback_menu() {

  $items['admin/settings/forms'] = array(
    'title' => 'Forms',
    'description' => '',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer express settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -2,
  );

  $items['admin/settings/forms/feedback'] = array(
    'title' => 'Feedback Form',
    'description' => 'Set a Feedback Form button for your site',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_feedback_admin_settings_form'),
    'access arguments' => array('administer express settings'),
  );

  $items['node/ajax/%'] = array(
    'page callback' => 'cu_feedback_get_webform',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'delivery callback' => 'cu_feedback_ajax_callback',
  );

  return $items;
}

/**
 * Feedback Configuration Form.
 */
function cu_feedback_admin_settings_form($form, &$form_state) {
  $form = array();
  $config = variable_get('cu_feedback_config');
  $path = $config['cu_feedback_path'];
  $label = $config['cu_feedback_label'];
  $color = $config['cu_feedback_color'];
  $embed = $config['cu_feedback_embed'];
  $form['cu_feedback_settings']['cu_feedback_path'] = array(
    '#type' => 'select',
    '#title' => 'Available Webforms',
    '#default_value' => $path ? $path : 'none',
    '#options' => _cu_feedback_webforms(),
    '#description' => 'Choose the webform you would like to use.',
  );
  $form['cu_feedback_settings']['cu_feedback_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Feedback Button Label',
    '#default_value' => $label ? $label : 'Contact Us',
    '#description' => 'Text for label/button.',
  );
  $form['cu_feedback_settings']['cu_feedback_color'] = array(
    '#type' => 'radios',
    '#title' => 'Feedback Button Color',
    '#options' => array('blue' => 'Blue', 'gold' => 'Gold'),
    '#default_value' => $color ? $color : 'blue',
  );
  $form['cu_feedback_settings']['cu_feedback_embed'] = array(
    '#type' => 'radios',
    '#title' => 'Feedback Form Presentation',
    '#options' => array('redirect' => 'Go to Webform (better for complex forms)', 'embed' => 'Pop-up Webform (better for simple forms)'),
    '#default_value' => $embed ? $embed : 'embed',
    '#description' => 'Choose what happens with the Feedback Button is pressed.',
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  $form['#submit'][] = 'cu_feedback_settings_submit';
  return $form;
}


/**
 * Submit fucntion for cu_feedback_admin_settings_form.
 */
function cu_feedback_settings_submit($form_id, &$form_state) {
  $config['cu_feedback_path'] = $form_state['values']['cu_feedback_path'];
  $config['cu_feedback_label'] = $form_state['values']['cu_feedback_label'];
  $config['cu_feedback_color'] = $form_state['values']['cu_feedback_color'];
  $config['cu_feedback_embed'] = $form_state['values']['cu_feedback_embed'];
  variable_set('cu_feedback_config', $config);
  drupal_set_message('Settings have been updated');
}

/**
 * Load webform to be embeded
 * page callback for node/ajax/%
 */
function cu_feedback_get_webform($nid) {
  $form_node = node_load($nid);
  return render(node_view($form_node, 'full'));
}

/**
 * print embeded webform
 * delivery callback for node/ajax/%
 */
function cu_feedback_ajax_callback($result) {
  print $result;
}

/**
 * Preprocess theme variables for a specific theme hook.
 *
 * This hook allows modules to preprocess theme variables for a specific theme
 * hook. It should only be used if a module needs to override or add to the
 * theme preprocessing for a theme hook it didn't define.
 *
 * For more detailed information, see theme().
 *
 * @param array $variables
 *   The variables array (modify in place).
 */
function cu_feedback_preprocess_html(&$variables) {
  global $base_url;
  $config = variable_get('cu_feedback_config');
  $nid = isset($config['cu_feedback_path']) ? $config['cu_feedback_path'] : '';
  $label = isset($config['cu_feedback_label']) ? $config['cu_feedback_label'] : 'Contact Us';
  $color = isset($config['cu_feedback_color']) ? $config['cu_feedback_color'] : 'blue';
  $embed = isset($config['cu_feedback_embed']) ? $config['cu_feedback_embed'] : 'embed';
  if (!path_is_admin(current_path())) {
    if ($form_node = node_load($nid)) {
      drupal_add_js('misc/ajax.js');
      $path = 'node/' . $nid;
      $link_class[] = 'cu-feedback-link';
      $link_class[] = 'cu-feedback-link-' . $color;
      $link_class[] = $embed == 'embed' ? 'cu-feedback-link-embed' : '';
      if ($embed) {
        $link = l('<i class="fa fa-chevron-up"></i> ' . check_plain($label), $path, array('html' => TRUE, 'attributes' => array('class' => $link_class, 'onclick' => 'cu_feedback_ajax_load()')));
      } else {
        $link = l('<i class="fa fa-chevron-up"></i> ' . check_plain($label), $path, array('html' => TRUE, 'attributes' => array('class' => $link_class)));
      }
      $variables['page']['page_bottom']['cu_feedback']['#markup'] = '<div id="cu-feedback">' . $link;
      if ($embed) {
        $variables['page']['page_bottom']['cu_feedback']['#markup'] .= '
        <div id="cu-feedback-content"></div>
        <script>
          function cu_feedback_ajax_load() {
            jQuery("#cu-feedback-content").load("' . $base_url . '/node/ajax/' . $nid . '");
          }
        </script>';
      }
      $variables['page']['page_bottom']['cu_feedback']['#markup'] .= '</div>';
      $variables['classes_array'][] = 'has-feedback-form';
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function cu_feedback_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'cu_feedback') . '/css/cu_feedback.css');
  drupal_add_js(drupal_get_path('module', 'cu_feedback') . '/js/cu_feedback.js');
}

/**
 * Published Webforms.
 */
function _cu_feedback_webforms() {
  $webforms = array();
  $webforms['none'] = 'No button';
  $query = db_select('node', 'n');
  $query->condition('n.type', 'webform', '=');
  $query->condition('n.status', 1, '=');
  $query->fields('n', array('nid', 'title'));
  $nids = $query->execute()->fetchCol();
  $nodes = node_load_multiple($nids);
  if (!empty($nodes)) {
    foreach ($nodes as $key => $node) {
      $webforms[$key] = $node->title;
    }
  }
  else {
    drupal_set_message('There are no published webforms available', 'warning');
  }
  return $webforms;
}
