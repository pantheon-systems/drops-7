<?php

/**
 * @file
 * More menus, more power!
 */

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
 * rather than implementing hook_form_alter() and checking the form ID, or
 * using long switch statements to alter multiple forms.
 *
 * Form alter hooks are called in the following order: hook_form_alter(),
 * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See
 * hook_form_alter() for more details.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 * @param string $form_id
 *   String representing the name of the form itself. Typically this is the
 *   name of the function that generated the form.
 *
 * @see hook_form_alter()
 * @see hook_form_BASE_FORM_ID_alter()
 * @see drupal_prepare_form()
 */
function more_menus_form_menu_configure_alter(&$form, &$form_state, $form_id) {
  // field to add a user set label for secondary menu
  $form['secondary_menu_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Secondary Menu Label',
    '#default_value' => variable_get('secondary_menu_label') ? variable_get('secondary_menu_label') : '',
    '#description' => 'Display a label for the secondary menu',
  );
  
  // Source for mobile menu
  $site_menus = menu_get_menus();
  $site_menus['use-main-secondary-menu'] = 'Use Main & Secondary Menus';
  $form['menu_mobile_links_source'] = array(
    '#type' => 'select',
    '#title' => 'Source for the mobile links',
    '#default_value' => variable_get('menu_mobile_links_source') ? variable_get('menu_mobile_links_source') : 'use-main-secondary-menu',
    '#options' => $site_menus,
    '#tree' => FALSE,
    '#description' => 'Select what should be displayed as the mobile menu.',
  );
  // Hide mobile menu source config if theme is not responsive
  if (!theme_get_setting('alpha_responsive', variable_get('theme_default'))) {
    $form['menu_mobile_links_source']['#access'] = FALSE;
  }
  
  // Source for footer menu
  $site_menus = menu_get_menus();
  $site_menus['no-footer-links'] = 'No footer links';
  $form['menu_footer_links_source'] = array(
    '#type' => 'select',
    '#title' => 'Source for the footer links',
    '#default_value' => variable_get('menu_footer_links_source') ? variable_get('menu_footer_links_source') : 'no-footer-links',
    '#options' => $site_menus,
    '#tree' => FALSE,
    '#description' => 'Select what should be displayed as the footer menu.',
  );
  return $form;
}

/**
 * Preprocess theme variables for a specific theme hook.
 *
 * This hook allows modules to preprocess theme variables for a specific theme
 * hook. It should only be used if a module needs to override or add to the
 * theme preprocessing for a theme hook it didn't define.
 *
 * For more detailed information, see theme().
 *
 * @param array $variables
 *   The variables array (modify in place).
 */
function more_menus_preprocess_page(&$variables) {
  $variables['mobile_menu'] = menu_navigation_links(variable_get('menu_mobile_links_source'));
  $variables['footer_menu'] = menu_navigation_links(variable_get('menu_footer_links_source'));
}
