<?php

/**
 * @file
 * Sticky Menu.
 */

/**
 * Preprocess theme variables for a specific theme hook.
 *
 * This hook allows modules to preprocess theme variables for a specific theme
 * hook. It should only be used if a module needs to override or add to the
 * theme preprocessing for a theme hook it didn't define.
 *
 * For more detailed information, see theme().
 *
 * @param array $variables
 *   The variables array (modify in place).
 */
function cu_sticky_menu_preprocess_html(&$variables) {
  $use_sticky_menu = variable_get('use_sticky_menu') ? variable_get('use_sticky_menu') : '0';
  if (!path_is_admin(current_path()) && $use_sticky_menu) {
    global $base_url;
    drupal_add_css(drupal_get_path('module', 'cu_sticky_menu') . '/css/cu_sticky_menu.css');
    drupal_add_js(drupal_get_path('module', 'cu_sticky_menu') . '/js/cu_sticky_menu.js', array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 50));
    $menu = menu_navigation_links(variable_get('menu_main_links_source', 'main-menu'));
    foreach ($menu as $key => $value) {
      if ($menu[$key]['href'] == '<front>') {
        $menu[$key]['html'] = TRUE;
        $menu[$key]['title'] = '<i class="fa fa-home"></i><span class="element-invisible">Home</span>';
        $menu[$key]['attributes']['id'] = 'sticky-menu-home-link';
      }
    }
    $variables['page']['page_top']['sticky_menu']['#weight'] = -99;
    $variables['page']['page_top']['sticky_menu']['#access'] = TRUE;
      $logo = theme_get_setting('logo');
      $site_name = variable_get('site_name', '');
      $variables['page']['page_top']['sticky_menu']['#markup'] = '<div id="sticky-menu" class="clearfix has-shadow"><a href="' . $base_url . '"><img src="' . $logo . '" alt=" " /><span class="site-name clearfix">' . strip_tags($site_name) . '</span></a>' . _cu_sticky_menu_build($menu) . '</div>';
  }
}

/**
 * Create sticky menu item.
 *
 * Empty e-mail addresses are allowed. See RFC 2822 for details.
 *
 * @param string $menu
 *   A string containing menu name.
 */
function _cu_sticky_menu_build($menu) {
  $links = theme('links', array(
    'links' => $menu,
    'attributes' => array(
      'id' => 'sticky-main-menu',
      'class' => array('links', 'inline', 'clearfix')
    ),
    'heading' => array(
      'text' => t('Main menu'),
      'level' => 'h2',
      'class' => array('element-invisible')
    )
  ));

  return $links;
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
 * rather than implementing hook_form_alter() and checking the form ID, or
 * using long switch statements to alter multiple forms.
 *
 * Form alter hooks are called in the following order: hook_form_alter(),
 * hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See
 * hook_form_alter() for more details.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 * @param string $form_id
 *   String representing the name of the form itself. Typically this is the
 *   name of the function that generated the form.
 *
 * @see hook_form_alter()
 * @see hook_form_BASE_FORM_ID_alter()
 * @see drupal_prepare_form()
 */
function cu_sticky_menu_form_menu_configure_alter(&$form, &$form_state, $form_id) {
  $form['use_sticky_menu'] = array(
    '#type' => 'radios',
    '#title' => 'Use sticky menu',
    '#default_value' => variable_get('use_sticky_menu') ? variable_get('use_sticky_menu') : '0',
    '#options' => array(
      '0' => 'No',
      '1' => 'Yes',
    ),
    '#weight' => '50',
    '#description' => 'Enabling this will stick the main menu to the top of the browser when the user scrolls down the page',
  );
}
