<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function express_settings_menu() {
  // IN ADMIN, BUT NOT ADMIN/CONFIG
  $items['admin/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'express_settings_management_page',
    'access arguments' => array('administer express settings'),
    'weight' => 8,
  );

  // DEFINES SITE CONFIGURATION SECTION
  $items['admin/settings/site-configuration'] = array(
    'title' => 'Site Configurations',
    'description' => '',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer express settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -99,
  );
  $items['admin/settings/site-configuration/site-name'] = array(
    'title' => 'Site Name',
    'description' => 'Edit the text for the top brand banner of the website',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_settings_site_name_form'),
    'access arguments' => array('administer express settings'),
    'weight' => -50,
  );
  $items['admin/settings/site-configuration/contact'] = array(
    'title' => 'Contact Information',
    'description' => 'Edit the Contact Information which appears in the footer region',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_settings_contact_info_form'),
    'access arguments' => array('administer express settings'),
    'weight' => -25,
  );
  $items['admin/settings/site-configuration/google-analytics'] = array(
    'title' => 'Google Analytics',
    'description' => 'Add your Google Analytics account number (i.e. UA-123456-1)',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_settings_google_analytics_form'),
    'access arguments' => array('administer express settings'),
    'weight' => 25,
  );

  $items['admin/settings/url-management'] = array(
    'title' => 'URL Management',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer redirects'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 1,
  );
  $items['admin/settings/url-management/redirects'] = array(
    'title' => 'URL Redirects',
    'description' => 'Change your site\'s URL paths by aliasing them',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/search/redirect'),
    'access arguments' => array('administer redirects'),
    'weight' => 0,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function express_settings_menu_alter(&$items) {
  // Add new permissions to redirect settings and generate
  $items['admin/config/search/redirect/settings']['access arguments'] = array('administer redirect settings');
  $items['admin/config/search/redirect/generate']['access arguments'] = array('administer redirect settings');
}

/**
 * Implements hook_page_alter().
 */
function express_settings_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'express_settings') . '/css/express-settings.css');
}

/**
 * Implements hook_navbar_alter().
 */
function express_settings_navbar_alter(&$items) {
  $items['administration']['#title'] = t('Express');
  $items['administration']['tab']['#title'] = t('Express');
}

/**
 * Implements hook_navbar().
 */
function express_settings_navbar() {
  $items = array();

  $items['user_logout'] = array(
    '#type' => 'navbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Log out'),
      '#href' => 'user/logout',
      '#options' => array(
        'attributes' => array(
          'title' => t('Log out'),
          'class' => array('navbar-icon', 'navbar-icon-logout'),
        ),
      ),
    ),
    '#weight' => 200,
  );

  return $items;
}

/**
 * Page callback for admin/site-configuration/site-name.
 */
function express_settings_site_name_form($form, &$form_state) {
  global $base_url;
  $form = array();

  $form['site_name_1'] = array(
    '#title' => t('Site name - line 1'),
    '#type' => 'textfield',
    '#default_value' => variable_get('site_name_1', 'Express'),
    '#required' => TRUE,
  );
  $form['site_name_2'] = array(
    '#title' => t('Site name - line 2 (optional)'),
    '#type' => 'textfield',
    '#default_value' => variable_get('site_name_2', ''),
    '#required' => FALSE,
  );

  // Let system_settings_form_submit run first to variable_set vars.
  $form = system_settings_form($form);
  $form['#submit'][] = 'express_settings_site_name_form_submit';
  return $form;
}

/**
 * Submit handler for express_settings_site_name_form.
 */
function express_settings_site_name_form_submit($form, &$form_state) {

  // Save site names as independent variables and concatenated
  $full_site_name = $form_state['values']['site_name_1'] . ' ' . $form_state['values']['site_name_2'];
  variable_set('site_name', $full_site_name);

}

/**
 * Page callback for admin/site-configuration/google-analytics.
 */
function express_settings_google_analytics_form($form, &$form_state) {
  $form = array();

  $form['ga_account'] = array(
    '#title' => t('Google Analytics Account ID'),
    '#type' => 'textfield',
    '#default_value' => variable_get('ga_account', ''),
    '#description' => t('Example: UA-123456-1'),
  );

  $form['#validate'][] = 'express_settings_google_analytics_form_validate';
  // Let system_settings_form_submit run first to variable_set vars.
  $form = system_settings_form($form);
  $form['#submit'][] = 'express_settings_google_analytics_form_submit';
  return $form;
}

/**
 * Validation handler for express_settings_google_analytics_form().
 */
function express_settings_google_analytics_form_validate($form, &$form_state) {
  // Ensure ga-account looks like a real account value.
  if (!empty($form_state['values']['ga_account'])) {
    $pattern = '/(UA|ua)-[0-9]*-[0-9]*/';
    $match = preg_match($pattern, $form_state['values']['ga_account']);
    if (!$match) {
      form_set_error('ga_account', t('Please enter your google account in the form of "UA-123456-1"'));
    }
  }
}

/**
 * Submit handler for express_settings_google_analytics_form().
 */
function express_settings_google_analytics_form_submit($form, &$form_state) {
  if (variable_get('ga_account', '')) {
    $js_code = format_string("ga('create', '@ga_account', 'auto', {'name':'customTracker'});  ga('customTracker.send', 'pageview');", array('@ga_account' => variable_get('ga_account', '')));
    variable_set('googleanalytics_codesnippet_after', $js_code);
  }
  else {
    variable_set('googleanalytics_codesnippet_after', '');
  }
}

/**
 * Page callback for admin/settings/contact.
 */
function express_settings_contact_info_form($form, &$form_state) {

  $site_info_body = variable_get('site_info_body', array(
    'value' => t('Put your contact information here'),
    'format' => 'wysiwyg',
  ));
  $form['contact_info'] = array(
    '#type' => 'fieldset',
    '#title' => 'Contact Information',
  );
  $form['contact_info']['site_info_body'] = array(
    '#type' => 'text_format',
    '#default_value' => $site_info_body['value'],
    '#format' => $site_info_body['format'],
    '#required' => FALSE,
    '#description' => t('This will display as contact information for your visitors'),
  );

  return system_settings_form($form);
}



/**
 * Preprocess theme variables for a specific theme hook.
 *
 * This hook allows modules to preprocess theme variables for a specific theme
 * hook. It should only be used if a module needs to override or add to the
 * theme preprocessing for a theme hook it didn't define.
 *
 * For more detailed information, see theme().
 *
 * @param array $variables
 *   The variables array (modify in place).
 */
function express_settings_preprocess_page(&$variables) {
  if (variable_get('site_name_2', '')) {
    $variables['site_name'] = '<span class="site-name-two-lines">' . variable_get('site_name_1', NULL) . '<br />' . variable_get('site_name_2', NULL) . '</span>';
    $variables['classes_array'][] = 'two-line-title';
  }
}

/**
 * Preprocess theme variables for a specific theme hook.
 *
 * This hook allows modules to preprocess theme variables for a specific theme
 * hook. It should only be used if a module needs to override or add to the
 * theme preprocessing for a theme hook it didn't define.
 *
 * For more detailed information, see theme().
 *
 * @param array $variables
 *   The variables array (modify in place).
 */
function express_settings_preprocess_html(&$variables) {
  if (variable_get('site_name_2', '')) {
    $variables['head_title_array']['name'] = variable_get('site_name_1', NULL) . ' ' . variable_get('site_name_2', NULL);
  }
}

/**
 * Implements hook_permission().
 */
function express_settings_permission() {
  return array(
    'administer express settings' => array(
      'title' => 'Administer Express Settings',
      'description' => 'Access admin/settings to configure settings for CU',
    ),
    'administer redirect settings' => array(
      'title' => 'Administer Redirect Settings',
    ),
  );
}

/**
 * Menu callback; Provide the administration overview page.
 */
function express_settings_management_page() {

  $blocks = array();
  if ($admin = db_query("SELECT menu_name, mlid FROM {menu_links} WHERE link_path = 'admin/settings'")->fetchAssoc()) {
    //dsm($admin);
    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'admin/help' AND menu_name = :menu_name AND ml.plid = :mlid AND hidden = 0", $admin, array('fetch' => PDO::FETCH_ASSOC));

      // SELECT m.*, ml.* FROM menu_links ml INNER JOIN menu_router m ON ml.router_path = m.path WHERE menu_name = 'management' AND ml.plid = 559 AND hidden = 0
    foreach ($result as $item) {
      //dsm($item);
      _menu_link_translate($item);
      if (!$item['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item['localized_options']['attributes']['title'])) {
        $item['description'] = $item['localized_options']['attributes']['title'];
        unset($item['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block['content'] = '';
      $block['content'] .= theme('admin_block_content', array('content' => system_admin_menu_block($item)));
      if (!empty($block['content'])) {
        $block['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks[(50000 + $item['weight']) . ' ' . $item['title'] . ' ' . $item['mlid']] = $block;
    }
  }
  if ($blocks) {
    ksort($blocks);
    return theme('admin_page', array('blocks' => $blocks));
  }
  else {
    return t('You do not have any administrative items.');
  }
}
