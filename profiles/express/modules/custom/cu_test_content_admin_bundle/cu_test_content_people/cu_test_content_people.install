<?php

function cu_test_content_people_install() {

  $terms = array(
    'Faculty' => array(),
    'Staff' => array(),
    'Administration' => array(),
    'Graduate Student' => array(),
    'Alumni' => array(),
  );
  _cu_test_content_people_create_taxonomy_terms_insert('person_type', $terms);

  $terms = array(
    'Test Department One' => array(),
    'Test Department Two' => array(),
    'Test Department Three' => array(),
    'Test Department Four' => array(),
    'Test Department Five' => array(),
  );
  _cu_test_content_people_create_taxonomy_terms_insert('department', $terms);


  $response = drupal_http_request('http://api.randomuser.me/?results=20&nat=us');
  if ($response->code == '200') {
    $data = json_decode($response->data, TRUE);
    $users = $data['results'];
    foreach($users as $user) {
      _cu_test_content_people_generate($user);
    }
    _cu_test_content_people_list_node();
  } else {
    drupal_set_message('api has no results');
  }
}

function _cu_test_content_people_generate($user) {
  $temp_people = variable_get('cu_test_content_people', array());
  $first = ucfirst($user['name']['first']);
  $last = ucfirst($user['name']['last']);
  $email = $user['email'];
  $phone = $user['phone'];
  $web = array(
    'url' => 'http://www.example.com/' . $user['name']['last'],
    'title' => 'My Website',
  );
  $photo = $user['picture']['large'];
  $address = $user['location']['street'] . '<br />' . $user['location']['city'] . ', ' . $user['location']['state'] . ' ' . $user['location']['zip'];

  $node = new StdClass();
  $node->language = LANGUAGE_NONE;
  $node->type = 'person';

  $node->field_person_first_name[$node->language][0]['value'] = $first;
  $node->field_person_last_name[$node->language][0]['value'] = $last;
  $node->field_person_email[$node->language][0]['email'] = $email;
  $node->field_person_phone[$node->language][0]['value'] = $phone;
  $node->field_person_website[$node->language][0]['title'] = $web['title'];
  $node->field_person_website[$node->language][0]['url'] = $web['url'];
  $node->field_person_address[$node->language][0]['value'] = ucwords($address);
  $node->field_person_address[$node->language][0]['format']  = 'wysiwyg';

  $vocabulary = taxonomy_vocabulary_machine_name_load('person_type');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $rand_terms = array_rand($terms, 2);
  $rand_term = $rand_terms[0];
  $node->field_person_job_type[$node->language][0]['tid'] = $rand_term;

  $vocabulary = taxonomy_vocabulary_machine_name_load('department');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  $rand_terms = array_rand($terms, 2);
  $rand_term = $rand_terms[0];
  $node->field_person_department[$node->language][0]['tid'] = $rand_term;

  $titles = array(
    'Professor',
    'Assistant Professor',
    'Dean',
    'Department Chair',
    'Research Assistant',
    'Administrative Assistant',
    'Director of Communications'
  );
  $title = $titles[array_rand($titles)];
  $node->field_person_title[$node->language][0]['value'] = $title;


  $file_path = system_retrieve_file($photo);
  $file = (object) array(
    'uid' => $count,
    'uri' => $file_path,
    'filemime' => file_get_mimetype($file_path),
    'status' => 1,
  );
  // You can specify a subdirectory, e.g. public://foo/
  $file = file_copy($file, 'public://');
  $node->field_person_photo[LANGUAGE_NONE][0] = (array) $file;
  $node->field_person_photo[LANGUAGE_NONE][0]['alt'] = "$first $last";

  $text = _cu_test_content_people_dummy_text();
  $node->body[$node->language][0]['value'] = $text;
  $node->body[$node->language][0]['safe_value'] = $text;
  $node->body[$node->language][0]['format']  = 'wysiwyg';

  $node->uid = 1;
  node_save($node);
  $temp_people[$node->nid] = $node->title;
  drupal_set_message("Person $node->title - $node->nid created.");
  variable_set('cu_test_content_people', $temp_people);
}

function _cu_test_content_people_dummy_text() {
  $response = drupal_http_request('http://loripsum.net/api/5');
  if ($response->code == '200') {
    return $response->data;
  } else {
    return 'No dummy text.';
  }
}

function _cu_test_content_people_list_node() {
  $nodes = array(
    '1' => array(
      'title' => 'Faculty & Staff',
      'link_title' => 'People',
    ),
  );
  foreach ($nodes as $elem) {
    $node_title = $elem['title'];
    $node = new StdClass();
    $node->title = $node_title;
    $node->language = LANGUAGE_NONE;
    $node->body[$node->language][0]['format']  = 'wysiwyg';
    $node->type = 'people_list_page';
    $node->menu = array(
      'menu_name' => 'main-menu',
      'plid' => $plid,
      'link_title' => $elem['link_title'],
      'enabled' => TRUE,
      'weight' => 99,
    );
    $node->uid = 1;
    node_save($node);
    variable_set('cu_test_content_people_list_page', $node->nid);
  }
}


/*
 * Create terms
 *
 */
function _cu_test_content_people_create_taxonomy_terms_insert($vocab_name, $terms, $parent = NULL) {
  $temp_terms = variable_get('cu_test_content_people_terms', array());
  if (!(isset($parent))) {
    $parent = 0;
  }
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  // Get the vocabulary ID.
  $vid = $vocab->vid;
  foreach ($terms as $parent_name => $children) {
    // Create the parent term.
    $term = new stdClass();
    $term->name = $parent_name;
    $term->vid = $vid;
    $term->parent = $parent;
    $status = taxonomy_term_save($term);
    if (!$status) {
      throw new Exception("Could not save taxonomy term $parent_name with these params -> vid: $vid parent: $parent");
    }
    if (isset($children)) {
      _cu_test_content_people_create_taxonomy_terms_insert($vocab_name, $children, $term->tid);
    }
    $temp_term = taxonomy_get_term_by_name($term->name, $vocab_name);
    $temp_term = current($temp_term);
    $temp_terms[$temp_term->tid] = $term->name;
    drupal_set_message("Term $term->name - $temp_term->tid created.");
    if ($vocab_name == 'tags') {
      _cu_test_content_terms_create_list_page($temp_terms);
    }
  }
  variable_set('cu_test_content_people_terms', $temp_terms);
  return TRUE;
}

function cu_test_content_people_uninstall() {
  $temp_terms = variable_get('cu_test_content_people_terms', NULL);
  if ($temp_terms) {

    foreach ($temp_terms as $tid => $name) {
      taxonomy_term_delete($tid);
      drupal_set_message("Term $name - $tid deleted.");
    }
    variable_del('cu_test_content_terms');
  }

  $temp_people_list = variable_get('cu_test_content_people_list_page', NULL);
  if ($temp_people_list) {
    node_delete($temp_people_list);
    drupal_set_message("Node $temp_people_list deleted.");
    variable_del('cu_test_content_people_list_page');
  }


  $temp_people = variable_get('cu_test_content_people', NULL);
  if ($temp_people) {
    foreach ($temp_people as $nid => $name) {
      node_delete($nid);
      drupal_set_message("Node $name - $nid deleted.");
    }
    variable_del('cu_test_content_people');
  }
}
