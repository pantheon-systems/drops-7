<?php

/**
 * @file
 * Version.
 */

/**
 * Implements hook_menu().
 */
function cu_version_menu() {
  $items['admin/version'] = array(
    'title' => 'Version',
    'page callback' => 'cu_version_admin_version',
    'type' => MENU_SUGGESTED_ITEM,
    'access arguments' => array('access cu version information'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cu_version_permission() {
  return array(
    'access cu version information' => array(
      'title' => t('Access CU Version Information'),
      'description' => t('Access admin/version to determine core/profile version numbers'),
    ),
  );
}

/**
 * Page callback for admin/version.
 *
 * Provides additional version information.
 */
function cu_version_admin_version() {
  $build = array();

  $core_version = _cu_version_determine_core_version();
  $profile_version = _cu_version_determine_profile_version();

  $rows = array(
    array(
      $core_version['core'],
      $core_version['version'],
    ),
    array(
      $profile_version['profile'],
      $profile_version['version'],
    ),
  );
  $build['info'] = array(
    '#theme' => 'table',
    '#header' => array(
      t('Name'),
      t('Version'),
    ),
    '#rows' => $rows,
  );
  return $build;
}

/**
 * Determines the version of Drupal core in use.
 */
function _cu_version_determine_core_version() {
  $parse = drupal_parse_info_file(drupal_get_path('module', 'system') . '/system.info');
  return array(
    'core' => 'Drupal',
    'version' => $parse['version'],
  );
}

/**
 * Determines the installed profile and its version.
 */
function _cu_version_determine_profile_version() {
  require_once DRUPAL_ROOT . '/includes/install.inc';

  // Determine installation profile used.
  $profile = variable_get('install_profile', '');
  $parse = install_profile_info($profile);

  // Determine version and name of installed profile.
  $version = $parse['version'];
  $profile = $parse['name'];
  return array(
    'profile' => $profile,
    'version' => $version,
  );
}

/**
 * Implements hook_init().
 *
 * Set Environment Indicator text/color based on environment.
 * Append profile name/version if applicable.
 */
function cu_version_init() {
  global $conf;
  $profile_version = _cu_version_determine_profile_version();
  $profile = $profile_version['profile'];
  $version = $profile_version['version'];

  // If we're on WWWNG.
  if (isset($_SERVER['WWWNG_ENV'])) {
    switch ($_SERVER['WWWNG_ENV']) {
      case 'stage':
        $ei_text = 'STAGE';
        $ei_color = 'blue';
        break;

      case 'cust_dev':
        $ei_text = 'DEV';
        $ei_color = 'green';
        break;

      case 'cust_test':
        $ei_text = 'TEST';
        $ei_color = 'yellow';
        break;

      case 'cust_prod':
        $ei_text = 'PRODUCTION';
        $ei_color = 'red';
        break;
        
     case 'local_dev':
        $ei_text = 'LOCAL';
        $ei_color = '#999';
        break;
        
    }
  }
  // Otherwise we assume 'LOCAL'.
  else {
    $ei_text = 'LOCAL';
    $ei_color = '#999';
  }

  // Append the profile name to the EI Text.
  if (!empty($profile)) {
    $ei_text .= ' - ' . drupal_strtoupper($profile);
  }
  // Append the profile version to the EI Text.
  if (!empty($version)) {
    $ei_text .= ' ' . $version;
  }
  $conf['environment_indicator_enabled'] = TRUE;
  $conf['environment_indicator_text'] = $ei_text;
  $conf['environment_indicator_color'] = $ei_color;
}
