<?php

/**
 * @file
 * Custom elements for datasets.
 */

include_once 'dkan_dataset.features.inc';
include_once 'dkan_dataset.theme.inc';
// TODO: make optional through admin settings.
include_once 'dkan_dataset.forms.inc';

/**
 * Implements hook_preprocess_html().
 */
function dkan_dataset_preprocess_html(&$vars) {
  $path = drupal_get_path('module', 'dkan_dataset');
  drupal_add_css($path . '/css/dkan_dataset.css');
  // Add body class for resource teaser type.
  if ($node = menu_get_object()) {
    if ($node->type == 'dataset') {
      $preview = variable_get('dkan_dataset_teaser_preview', 'explore');
      $vars['classes_array'][] = $preview;
    }
  }
  drupal_add_css($path . '/css/dkan-flaticon.css');
}

/**
 * Implements hook_menu().
 */
function dkan_dataset_menu() {
  $path = drupal_get_path('module', 'dkan_dataset');
  $items['node/%node/resource'] = array(
    'title' => 'Add Resource',
    'page callback' => 'dkan_dataset_add_resource',
    'page arguments' => array(1),
    'access callback' => 'dkan_dataset_add_resource_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dkan_dataset.pages.inc',
    'file path' => $path,
  );
  $items['node/%node/dataset'] = array(
    'title' => 'Back to dataset',
    'page callback' => 'dkan_dataset_back',
    'page arguments' => array(1),
    'access callback' => 'dkan_dataset_back_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dkan_dataset.pages.inc',
    'file path' => $path,
  );
  $items['node/%node/dataset/download'] = array(
    'title' => 'Download Dataset',
    'page callback' => 'dkan_dataset_download',
    'page arguments' => array(1),
    'access callback' => 'dkan_dataset_download_access',
    'access arguments' => array(1),
    'file' => 'dkan_dataset.pages.inc',
    'file path' => $path,
  );
  $items['admin/dkan'] = array(
    'title' => 'DKAN',
    'description' => 'DKAN Settings and Administration.',
    'weight' => -8,
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/dkan/dataset_preview'] = array(
    'title' => 'DKAN Dataset Previews',
    'description' => 'Settings for DKAN Dataset local and external previews.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_dataset_preview_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dkan_dataset.admin.inc',
  );
  $items['admin/dkan/dataset_forms'] = array(
    'title' => 'DKAN Dataset Forms',
    'description' => 'Form settings for DKAN Datasets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_dataset_form_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dkan_dataset.admin.inc',
  );
  if (module_exists('open_data_schema_map_dkan')) {
    $items['admin/dkan/dataset_api'] = array(
      'title' => 'DKAN Dataset API',
      'description' => 'Settings for DKAN Dataset APIs.',
      'page callback' => 'dkan_dataset_api_menu_settings',
      'access arguments' => array('administer site configuration'),
      'file' => 'dkan_dataset.admin.inc',
    );
  }
  return $items;
}

/**
 * Implements hook_node_view().
 */
function dkan_dataset_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'dataset') {

    $node->content['resources'] = array(
      '#theme' => 'dkan_dataset_resource_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#prefix' => '<div id="data-and-resources">',
      '#suffix' => '</div>',
      '#view_mode' => $view_mode,
    );
    $node->content['resources']['#attached']['css'][] = drupal_get_path('module', 'dkan_dataset') . '/css/dkan_dataset.css';
    $node->content['resources']['#attached']['js'][] = drupal_get_path('module', 'dkan_dataset') . '/js/dkan_tooltip.js';
    $node->content['release_date'] = array(
      '#theme' => 'dkan_dataset_release_date_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Release Date'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
    $node->content['modified_date'] = array(
      '#theme' => 'dkan_dataset_modified_date_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Modified Date'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
    $node->content['identifier'] = array(
      '#theme' => 'dkan_dataset_identifier_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Identifier'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
  }
  elseif ($view_mode == 'teaser' && ($node->type == 'dataset' || $node->type == 'resource')) {
    if (isset($node->content['links']['node']['#links']['node-readmore'])) {
      unset($node->content['links']['node']['#links']['node-readmore']);
    }
    $node->content['body']['#weight'] = '-10';
    $node->content['resources'] = array(
      '#type' => 'item',
      '#theme' => 'dkan_dataset_resource_teaser_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => '',
      '#label_display' => 'above',
      '#prefix' => '<div class="data-and-resources">',
      '#suffix' => '</div>',
      '#weight' => '20',
    );
  }
  elseif ($view_mode == 'full' && $node->type == 'resource') {
    $node->content['#attached']['css'][] = drupal_get_path('module', 'dkan_dataset') . '/css/dkan_dataset.css';
    $node->content['#attached']['js'][] = drupal_get_path('module', 'dkan_dataset') . '/js/dkan_tooltip.js';
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function dkan_dataset_field_extra_fields() {
  $extra['node']['dataset'] = array(
    'form' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
      'release_date' => array(
        'label' => t('Release Date'),
        'description' => t('Node published date available as a field'),
        'weight' => 0,
      ),
      'modified_date' => array(
        'label' => t('Modified Date'),
        'description' => t('Node changed date available as a field'),
        'weight' => 0,
      ),
      'identifier' => array(
        'label' => t('Identifier'),
        'description' => t('Unique identifier for dataset'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
      'release_date' => array(
        'label' => t('Release Date'),
        'description' => t('Node published date available as a field'),
        'weight' => 0,
      ),
      'modified_date' => array(
        'label' => t('Modified Date'),
        'description' => t('Node changed date available as a field'),
        'weight' => 0,
      ),
      'identifier' => array(
        'label' => t('Identifier'),
        'description' => t('Unique identifier for dataset'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Helper to get Resource nodes linked to a Dataset.
 */
function dkan_dataset_get_resource_nodes($nid) {
  $nodes = array();
  $nids = array();
  $query = new EntityFieldQuery();

  $results = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_dataset_ref', 'target_id', $nid, '=')
    ->execute();

  if ($results) {
    foreach ($results as $node) {
      foreach ($node as $nid => $obj) {
        $nids[] = $nid;
      }
    }
  }
  $nodes = isset($nids) ? node_load_multiple($nids) : array();
  return $nodes;
}

/**
 * Helper to get the format string for a resource node
 *
 * @param $node
 *   A resource node
 *
 * @return
 *   The format string (eg, "csv", "html", etc.). Defaults to "data".
 */
function dkan_dataset_get_resource_format($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  if ($node_wrapper->getBundle() != 'resource') {
    return FALSE;
  }
  if (isset($node->field_format['und']) && $node_wrapper->field_format->value()->name) {
    return $node_wrapper->field_format->value()->name;
  }
  return 'data';
}

/**
 * Helper to get title from nid.
 */
function dkan_dataset_get_title($nid) {
  $result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  if (isset($result['title'])) {
    return $result['title'];
  }
  else {
    return FALSE;
  }
}

/**
 * Returns trimmed text using views_trim_text().
 */
function dkan_dataset_text_trim($title, $number = 25) {
  $alter = array(
    'max_length' => $number,
    'ellipsis' => TRUE,
    'word_boundary' => TRUE,
    'trim' => TRUE,
  );
  return views_trim_text($alter, $title);
}

/**
 * Implements hook_libraries_info().
 */
function dkan_dataset_libraries_info() {
  $libraries['slugify'] = array(
    'name' => 'Slugify',
    'vendor url' => 'https://github.com/pmcelhaney/jQuery-Slugify-Plugin',
    'download url' => 'https://github.com/pmcelhaney/jQuery-Slugify-Plugin/archive/master.zip',
    'files' => array('js' => array('jquery.slugify')),
    'version' => 'master',
  );

  return $libraries;
}

/**
 * Creates the part on the node edit form that says what stage you are on.
 */
function dkan_form_create_stages($op, $dataset_nid = NULL, $resource_nid = NULL) {
  // TODO: should be theme function.
  $stages = '<div id="dkan-stages">';
  // Omit "Additional Info" depending on variable.
  $stages_additional_1 = $stages_additional_2 = $stages_additional_3 = $stages_additional_4 = '';
  if (variable_get('dkan_dataset_form_additional_info', 1)) {
    $stages_additional_1 = '
     <li class="last uncomplete">
        <span class="highlight">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</span>
    </li>';
    $stages_additional_2 = '
    <li class="last active">
      <span class="highlight" name="save" value="go-metadata" type="submit">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</span>
    </li> ';
    $stages_additional_3 = '
        <li class="last uncomplete">
          <span class="highlight">' . t('Additional data') . '</span>
        </li> ';
    $stages_additional_4 = '
    <li class="last complete">
        <span class="highlight">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</span>
    </li> ';

  }
  if ($op == 'resource-edit' || $op == 'resource-create') {
    $stages .= '<ol class="stages stage-3">
      <li class="first complete"><span class="highlight">' . l(t('Edit dataset'), 'node/' . $dataset_nid . '/edit') . '</span></li>
      <li class="middle active">
          <span class="highlight">Add data</span>
      </li> ' . $stages_additional_1 . '
    </ol>';
  }
  if ($op == 'dataset-additional') {
    $stages .= '<ol class="stages stage-3">
      <li class="first complete">
          <span class="highlight">' . l(t('Edit dataset'), 'node/' . $dataset_nid . '/edit') . '</span>
      </li>
      <li class="middle complete">
          <span class="highlight">' . l(t('Add dataset'), 'node/add/resource', array('query' => array('dataset' => $dataset_nid))) . '</span>
      </li> ' . $stages_additional_2 . '
    </ol>';
  }
  if ($op == 'dataset-create') {
    $stages .=
        '<ol class="stages stage-1">
          <li class="first active">
            <span class="highlight">' . t('Create dataset') . '</span>
          </li>
          <li class="middle uncomplete">
            <span class="highlight">' . t('Add data') . ' </span>
          </li> ' . $stages_additional_3 . '
        </ol>';
  }
  if ($op == 'dataset-edit') {
    $stages .= '<ol class="stages stage-1">
        <li class="first active">
            <span class="highlight">' . t('Create dataset') . '</span>
      </li>
      <li class="middle complete">
          <span class="highlight">' . l(t('Add data'), 'node/add/resource', array('query' => array('dataset' => $dataset_nid))) . '</span>
      </li> ' . $stages_additional_4 . '
    </ol>';
  }
  $stages .= '</div>';
  return $stages;
}

/**
 * Access callback for back link.
 */
function dkan_dataset_back_access($node) {
  if ($node->type != 'resource') {
    return FALSE;
  }
  else {
    return node_access('view', $node);
  }
}

/**
 * Access callback for 'Download Dataset' tab.
 */
function dkan_dataset_download_access($node) {
  if ($node->type != 'dataset') {
    return FALSE;
  }
  else {
    $node = entity_metadata_wrapper('node', $node);
    $resources = $node->field_resources->value();
    $file_count = 0;
    foreach ($resources as $resource) {
      if (isset($resource->field_upload[LANGUAGE_NONE])) {
        $file_count++;
      }
    }
    if ($file_count > 1) {
      return TRUE;
    }
  }
}

/**
 * Access callback for 'Add Resource' tab.
 */
function dkan_dataset_add_resource_access($node) {
  if ($node->type != 'dataset') {
    return FALSE;
  }
  elseif (node_hook($node->type, 'form') && node_access('create', $node->type)) {
    return TRUE;
  }
  else {
   return FALSE;
  }
}

/**
 * Discovers extension based off of mimetype.
 *
 * @param string $mimetype
 *   Mimetype to search for.
 *
 * @return string
 *   Extension or empty string.
 */
function dkan_dataset_discovery_extension($mimetype) {
  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
  $type = '';
  $mapping = file_mimetype_mapping();
  $offset = array_search($mimetype, $mapping['mimetypes']);
  if ($offset) {
    $type = array_search($offset, $mapping['extensions']);
  }
  return $type;
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function dkan_dataset_file_mimetype_mapping_alter(&$mapping) {
  $mapping['extensions']['json'] = 999;
  $mapping['mimetypes'][999] = 'application/json';
  // 'Htm' and 'html' have the same mapping number but 'htm' is after
  // content types of 'text/html' are alway 'htm' without this.
  unset($mapping['extensions']['htm']);
  // Same with 'shtml'.
  unset($mapping['extensions']['shtml']);
}

/**
 * Implements hook_node_update().
 */
function dkan_dataset_node_update($node) {
  global $user;
  switch ($node->type) {
    case 'dataset':
      if (!$node->is_new && module_exists('og')) {
        // Syncs groups across resources if a dataset is updated.
        dkan_dataset_sync_groups($node);
      }
      break;

    case 'resource':
      $resource = entity_metadata_wrapper('node', $node);
      $datasets = $resource->field_dataset_ref->raw();
      if (count($datasets)) {
        $queue = DrupalQueue::get('dataset_changelog');
        foreach ($datasets as $dataset) {
          $item = array(
            'dataset' => $dataset,
            'message' => 'Update to resource \'' . $node->title . '\'',
            'user' => $user->uid,
          );
          $queue->createItem($item);
        }
      }
      break;

    default:
      break;

  }
}

/**
 * Syncs groups on resources across groups.
 *
 * Resources attached to datasets need to add or remove groups based on whether
 * groups are added to a dataset or resources are added or removed from
 * a dataset.
 */
function dkan_dataset_sync_groups($node) {
  // Nodes.
  $node_orig = entity_metadata_wrapper('node', $node->original);
  $node_new = entity_metadata_wrapper('node', $node);
  // Groups.
  $groups_orig = $node_orig->__isset('og_group_ref') ? $node_orig->og_group_ref->value() : '';
  $groups_new = $node_new->__isset('og_group_ref') ? $node_new->og_group_ref->value() : '';
  if ($groups_new && $groups_orig) {
    // Resources.
    $resources_new = $node_orig->__isset('field_resources') ? $node_orig->field_resources->value() : '';
    $resources_orig = $node_new->__isset('field_resources') ? $node_new->field_resources->value() : '';
    if ($resources_new && $resources_orig) {

      $new_groups = array();
      $orig_groups = array();
      $new_resources = array();
      $orig_resources = array();
      // If group is a singular value field process differently.
      if (is_object($groups_new)) {
        if ($groups_new->vuuid != $groups_orig->vuuid) {
          dkan_dataset_process_groups($resources_new, $groups_new);
        }
      }
      else {
        // Grouping by nid to make it easier to compare.
        foreach ($groups_new as $new_key => $new_group) {
          $new_groups[$new_key] = $new_group->title;
        }
        foreach ($groups_orig as $orig_key => $orig_group) {
          $orig_groups[$orig_key] = $orig_group->title;
        }
        foreach ($resources_new as $new_key => $new_resource) {
          $new_resources[$new_resource->nid] = $new_resource;
        }
        foreach ($resources_orig as $orig_key => $orig_resource) {
          if ($orig_resource) {
            $orig_resources[$orig_resource->nid] = $orig_resource;
          }
        }
        // Groups have changed.
        $additional_groups = array();
        $resources_added = array();
        if ((array_diff($orig_groups, $new_groups) || array_diff($new_groups, $orig_groups)) && $resources_new) {
          $additional_groups = dkan_dataset_resource_groups($resources_new, $node);
          $groups_new = $groups_new + $additional_groups;
          dkan_dataset_process_groups($resources_new, $groups_new);
        }
      }
      // Resources have been added.
      if (array_diff_key($new_resources, $orig_resources) && $groups_new) {
        foreach ($new_resources as $nid => $resource) {
          foreach ($orig_resources as $orig_nid => $orig_resource) {
            // Don't process unless the resource has a referenced dataset.
            if (!isset($orig_resources[$nid]) && $resource->field_dataset_ref) {
              $resources_added[$nid] = $resource;
            }
          }
        }
        $additional_groups = dkan_dataset_resource_groups($resources_added, $node);
        $groups_new = $groups_new + $additional_groups;
        dkan_dataset_process_groups($resources_added, $groups_new);
      }
      // Resources have been removed.
      if (array_diff_key($orig_resources, $new_resources)) {
        $resources_removed = array_diff_key($orig_resources, $new_resources);
        $additional_groups = dkan_dataset_resource_groups($resources_removed, $node);
        // This resource should only still have groups if it is attached to
        // another dataset that has groups.
        $groups_new = $additional_groups;
        dkan_dataset_process_groups($resources_removed, $groups_new, 'removed');
      }
    }
  }
}

/**
 * Returns array of groups that a resource should be included in.
 *
 * Resources should have the same group as their datasets. Resources can have
 * more than one dataset. When one dataset changes we need to update all of the
 * groups it should be associated with.
 *
 * @params array $resources
 *   An array of resource nodes.
 * @params object $new_dataset
 *   New dataset that has already been loaded.
 *
 * @return array
 *   An array of groups that resource should be associated with.
 */
function dkan_dataset_resource_groups($resources, $new_dataset) {
  $groups = array();
  if (is_array($resources)) {
    foreach ($resources as $key => $resource) {
      if (isset($resource->field_dataset_ref['und'])) {
        foreach ($resource->field_dataset_ref['und'] as $dataset_key => $dataset_id) {
          if ($new_dataset->nid != $dataset_id['target_id']) {
            $dataset = node_load($dataset_id['target_id']);
            $dataset_wrapper = entity_metadata_wrapper('node', $dataset);
            $dataset_groups = $dataset_wrapper->og_group_ref->value();
            if ($dataset_groups) {
              foreach ($dataset_groups as $group_id => $group) {
                $groups[$group->nid] = $group;
              }
            }
          }
        }
      }
    }
  }
  return $groups;
}

/**
 * Adds groups to resource nodes either by saving or adding them to a queue.
 *
 * @param array $nodes
 *   Fully instantiated resource nodes.
 * @param array $groups
 *   Fully insstantiated group nodes.
 *   NOTE: This is an array if group field "Number of values" is multiple but an
 *   object if "Number of values" is singular.
 */
function dkan_dataset_process_groups($nodes, $groups, $op = 'added', $limit_update_resources = 20) {
  $counter_resource = 0;
  $queued_items = 0;
  if (is_array($nodes)) {
    foreach ($nodes as $key => $node) {
      $wrapper_resource = entity_metadata_wrapper('node', $node);
      if ($counter_resource < $limit_update_resources) {
        $wrapper_resource->og_group_ref->set($groups);
        $wrapper_resource->save();
        $counter_resource++;
      }
      else {
        $queue = DrupalQueue::get('dkan_dataset_group_update');
        $queue->createQueue();
        $queue->createItem(array('wrapper' => $wrapper_resource, 'new_groups' => $groups));
        $queued_items++;
      }
    }
    if ($counter_resource) {
      if ($op == 'added') {
        drupal_set_message(t("%d resource(s) were added to the group or groups for this dataset.", array('%d' => $counter_resource)));
      }
      elseif ($op == 'removed') {
        drupal_set_message(t("%d resource(s) were removed from the group or groups for this dataset.", array('%d' => $counter_resource)));
      }
    }
    if ($queued_items) {
      drupal_set_message(t("%d resources were queued to be updated with the new groups. They will be processed during upcoming cron runs.", array('%d' => $queued_items)));
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function dkan_dataset_cron_queue_info() {
  $queues = array();
  $queues['dkan_dataset_group_update'] = array(
    'worker callback' => 'dkan_dataset_update_groups',
    'time' => 30,
  );
  $queues['dataset_changelog'] = array(
    'worker callback' => 'dkan_dataset_dataset_changelog_run',
    'time' => 20,
  );
  return $queues;
}

/**
 * Processes resources.
 */
function dkan_dataset_update_groups($data) {
  $data['wrapper']->og_group_ref->set($data['new_groups']);
  $data['wrapper']->save();
}

/**
 * Callback for dkan_dataset_dataset_changelog cron worker.
 *
 * @param array $item
 *   An associative array containing the dataset nid and a log message.
 */
function dkan_dataset_dataset_changelog_run($item) {
  global $user;
  $original_user = $user;
  drupal_save_session(FALSE);
  // Increment Revision.
  if (isset($item['user']) && isset($item['dataset']) && isset($item['message'])) {
    $user = user_load($item['user']);
    ctools_include('Dataset', 'dkan_dataset');
    $dataset = Dataset::instance($item['dataset']);
    if ($dataset->created) {
      $dataset->incrementRevision($item['message']);
      $dataset->save();
    }
  }
  // Restore Anonymous user.
  $user = $original_user;
  drupal_save_session(TRUE);
}

/**
 * Implements hook_page_alter().
 */
function dkan_dataset_page_alter(&$page) {
  $breadcrumbs = drupal_get_breadcrumb();
  if (arg(0) == 'dataset' && is_array($breadcrumbs)) {
    $breadcrumbs[1] = t('Datasets');
    $breadcrumbs[2] = t('Search');
    // We can return here because page_title is handled by views.
    drupal_set_breadcrumb($breadcrumbs);
  }
}

/**
 * Retrieves all external preview links for a given dataset node. The
 * dkan_dataset module ships with three previews - dkan, arcgis and cartodb.
 * Additional previews can be added by implementing
 * hook_dkan_dataset_external_previews_alter().
 *
 * @param $node
 *   The dataset node object.
 *
 * @return array
 *   An array of associative arrays, keyed by "machine name" and containing:
 *     - name: Full name of preview type.
 *     - link_callback: Callback function for generating the preview link, given
 *       a node object
 *     - suggested_formats: array of formats suggested for use with this preview.
 *       Will populate the format vocabulary and be used in preview definitions.
 *     - description: Full description of the preview type.
 *     - format: Array of the formats this preview is currently enabled for.
 */
function dkan_dataset_teaser_get_external_previews() {
  $previews = array();
  $previews['dkan'] = array(
    'name' => variable_get('dkan_dataset_teaser_preview_label', '') . ' ' . t('Preview'),
    'link_callback' => 'dkan_dataset_preview_url_local',
    'suggested_formats' => array('csv', 'xls'),
    'description' => t('Local preview. Preview tabular data in a grid, basic chart or map. This preview type is not optional and will load only for the suggested formats listed.'),
  );
  // For DKAN, we don't add the format mannually, so copy the values from suggested_formats
  $previews['dkan']['format'] = $previews['dkan']['suggested_formats'];

  $previews['arcgis'] = array(
    'name' => t('ArcGIS Preview'),
    'link_callback' => 'dkan_dataset_preview_url_arcgis',
    'suggested_formats' => array('rest', 'esri rest', 'arcgis'),
    'description' => t('ArcGIS preview for ESRI endpoints. Requires a URL in the resource API field; will not work with resource files.'),
  );
  $previews['cartodb'] = array(
    'name' => t('CartoDB Preview'),
    'link_callback' => 'dkan_dataset_preview_url_cartodb',
    'suggested_formats' => array('csv', 'xls', 'excel', 'openxml', 'kml', 'geojson'),
    'description' => t('Previews resources with geodata in the CartoDB mapping service.'),
  );

  drupal_alter('dkan_dataset_external_previews', $previews);

  // Load format vocabulary into array of strings
  $format_vocabulary = taxonomy_vocabulary_machine_name_load('format');
  $formats = taxonomy_get_tree($format_vocabulary->vid);
  $format_names = array();
  // Get an array of just term names
  foreach ($formats as $format) {
    $format_names[] = $format->name;
  }

  // Make sure there is a taxonomy entry for every "suggested" format, and an
  // array for each $preview[format].
  $suggested_formats = array();
  // Collect all suggested formats across preview types.
  foreach ($previews as $machine_name => $preview) {
    $suggested_formats = array_merge($suggested_formats, $preview['suggested_formats']);
    if (!isset($preview['format'])) {
      $previews[$machine_name]['format'] = array();
    }
  }
  $suggested_formats = array_unique($suggested_formats);
  foreach ($suggested_formats as $suggested_format) {
     if (!in_array($suggested_format, $format_names)) {
        $new_format = new stdClass();
        $new_format->name = $suggested_format;
        $new_format->vid = $format_vocabulary->vid;
        taxonomy_term_save($new_format);
     }
  }

  // Now populate the formats array
  foreach ($formats as $format) {
    $var_name = "dkan_dataset_format_previews_tid{$format->tid}";
    $format_settings = variable_get($var_name, array());
    if (!empty($format_settings)) {
      foreach ($format_settings as $machine_name => $value) {
        if ($value) {
          $previews[$machine_name]['format'][] = $format->name;
        }
      }
    }
  }
  return $previews;
}

/**
 * Get array of previews for a specific node
 * @param  object $node The resource node object
 * @return array       Array of preview arrays.
 */
function dkan_dataset_teaser_external_previews_for_resource($node) {
  $resource_wrapper = entity_metadata_wrapper('node', $node);
  $previews = dkan_dataset_teaser_get_external_previews();
  // Get resource format
  $format = t("data");
  if ($resource_wrapper->field_format->value()) {
    $format = $resource_wrapper->field_format->value()->name;
  }
  foreach ($previews as $provider => $preview) {
    // Filter by format and availability of arguments (if any argument is NULL, no dice)
    // @todo allow individual previews to be disabled in settings
    if (!in_array($format, $preview['format'])) {
      unset($previews[$provider]);
    }
    else {
      if ($url = $preview['link_callback']($node)) {
        $previews[$provider]['url'] = $url;
      }
      else {
        unset($previews[$provider]);
      }
    }
  }
  return $previews;
}

/**
 * Callback function for local preview URLs
 * @param  object $node Resource node object
 * @return string       Preview URL
 */
function dkan_dataset_preview_url_local($node) {
  if ($node->type == 'resource') {
    return url('node/' . $node->nid);
  }
}

/**
 * Callback function for ArcGIS preview URLs
 * @param  object $node Resource node object
 * @return string       Preview URL
 */
function dkan_dataset_preview_url_arcgis($node) {
  // Get resource API link URL
  $resource_wrapper = entity_metadata_wrapper('node', $node);
  if ($resource_wrapper->field_link_api->value()) {
    return 'http://www.arcgis.com/home/webmap/viewer.html?url=' . $resource_wrapper->field_link_api->url->value();
  }
}

/**
 * Callback function for CartoDB preview URLs
 * @param  object $node Resource node object
 * @return string       Preview URL
 */
function dkan_dataset_preview_url_cartodb($node) {
  // Get resource file URL
  $resource_file_url = NULL;
  $resource_wrapper = entity_metadata_wrapper('node', $node);
  $pattern = 'http://oneclick.cartodb.com/?file=%s';

  if ($resource_wrapper->field_upload->value()) {
    $resource_file_url = file_create_url($resource_wrapper->field_upload->value()->uri);
  }
  elseif ($resource_wrapper->field_link_remote_file->value()) {
    $resource_file_url = $resource_wrapper->field_link_remote_file->value()->uri;
  }
  if ($resource_file_url) {
    return sprintf($pattern, $resource_file_url);
  }
}
