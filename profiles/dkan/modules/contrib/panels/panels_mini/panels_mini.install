<?php

/**
 * Implementation of hook_schema().
 */
function panels_mini_schema() {
  // This should always point to our 'current' schema. This makes it relatively easy
  // to keep a record of schema as we make changes to it.
  return panels_mini_schema_1();
}

/**
 * Schema version 1 for Panels in D6.
 */
function panels_mini_schema_1() {
  $schema = array();

  $schema['panels_mini'] = array(
    'export' => array(
      'identifier' => 'mini',
      'load callback' => 'panels_mini_load',
      'load all callback' => 'panels_mini_load_all',
      'save callback' => 'panels_mini_save',
      'delete callback' => 'panels_mini_delete',
      'export callback' => 'panels_mini_export',
      'api' => array(
        'owner' => 'panels_mini',
        'api' => 'panels_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'no export' => TRUE,
        'description' => 'The primary key for uniqueness.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The unique name of the mini panel.',
      ),
      'category' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'The category this mini panel appears in on the add content pane.',
      ),
      'did' => array(
        'type' => 'int',
        'no export' => TRUE,
        'description' => 'The display ID of the panel.',
      ),
      'admin_title' => array(
        'type' => 'varchar',
        'length' => '128',
        'description' => 'The administrative title of the mini panel.',
      ),
      'admin_description' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Administrative title of this mini panel.',
        'object default' => '',
      ),
      'requiredcontexts' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
        'description' => 'An array of required contexts.',
      ),
      'contexts' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
        'description' => 'An array of contexts embedded into the panel.',
      ),
      'relationships' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
        'description' => 'An array of relationships embedded into the panel.',
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function panels_mini_uninstall() {
  $panels_exists = db_table_exists('panels_display');

  $result = db_query("SELECT * FROM {panels_mini}");
  $deltas = array();
  foreach ($result as $panel_mini) {
    // Delete all associated displays.
    if (!function_exists('panels_delete_display')) {
      require_once drupal_get_path('module', 'panels') .'/panels.module';
    }
    if ($panels_exists) {
      panels_delete_display($panel_mini->did);
    }

    $deltas[] = $panel_mini->pid;
  }

  if ($deltas) {
    // Delete all configured blocks.
    db_delete('block')
      ->condition('module', 'panels_mini')
      ->condition('delta', $deltas)
      ->execute();
  }
}
