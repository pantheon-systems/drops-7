<?php
/**
 * @file
 * fieldable panel panes install file
 */

/**
 * Implements hook_install().
 */
function fieldable_panels_panes_install() {
  // The included FPP type can be skipped.
  if (!variable_get('fieldable_panels_panes_skip_default_type', FALSE)) {
    ctools_include('export');

    $item = ctools_export_crud_new('fieldable_panels_pane_type');
    $item->name = 'fieldable_panels_pane';
    $item->title = t('Panels Pane');
    ctools_export_crud_save('fieldable_panels_pane_type', $item);
  }
}


/**
 * Implements hook_uninstall().
 */
function fieldable_panels_panes_uninstall() {
  $results = db_query('SELECT name FROM {fieldable_panels_pane_type}');
  foreach ($results as $type) {
    field_attach_delete_bundle('fieldable_panels_pane', $type->name);
  }

  // Variables.
  variable_del('fieldable_panels_panes_skip_default_type');
}

/**
 * Implements hook_schema().
 */
function fieldable_panels_panes_schema() {
  $schema = array();

  $schema['fieldable_panels_panes'] = array(
    'description' => 'Entity table for panel pane content with fields.',
    'fields' => array(
      'fpid' => array(
        'description' => 'The primary identifier for the entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The current version in use for this entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'bundle' => array(
        'description' => 'The bundle of the entity.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'title' => array(
        'description' => 'The title of the entity.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'link' => array(
        'description' => 'Whether or not this entity title will link to another page.',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'path' => array(
        'description' => 'The path the title should link to.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'reusable' => array(
        'description' => 'Whether or not this entity will appear in the Add Content dialog.',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'admin_title' => array(
        'description' => 'The title as it will appear in the Add Content dialog.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'admin_description' => array(
        'description' => 'The description it will appear in the Add Content dialog with.',
        'type' => 'text',
      ),
      'category' => array(
        'description' => 'The category under which it will appear in the Add Content dialog.',
        'type' => 'text',
      ),
      'view_access' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Access rules to describe if the user has view access to this entity.',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'edit_access' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Access rules to describe if the user has view access to this entity.',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the entity was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uuid' => array(
        'type' => 'char',
        'length' => 36,
        'default' => '',
        'description' => 'The Universally Unique Identifier.',
      ),
      'language' => array(
        'description' => 'The {languages}.language of this entity.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('fpid'),
    'indexes' => array(
      'reusable' => array('reusable'),
    ),
  );

  $schema['fieldable_panels_panes_revision'] = array(
    'description' => 'Entity revision table for panel pane content with fields.',
    'fields' => array(
      'fpid' => array(
        'description' => 'The id this revision belongs to',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp when the revision was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The author of the revision.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of the entity.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'log' => array(
        'description' => t('A log message associated with the revision.'),
        'type' => 'text',
        'size' => 'big',
      ),
      'vuuid' => array(
        'type' => 'char',
        'length' => 36,
        'default' => '',
        'description' => 'The Universally Unique Identifier.',
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'fpid' => array('fpid', 'vid'),
    ),
  );

  $schema['fieldable_panels_pane_type'] = array(
    'description' => 'Entity bundle table for panel pane content.',
    'fields' => array(
      'name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'export' => array(
      'admin_title' => 'title',
      'admin_description' => 'description',
      'api' => array(
        'owner' => 'fieldable_panels_panes',
        'api' => 'fieldable_panels_pane_type',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'primary key' => array('name'),
  );


  // Optional cache table for entitycache support.
  $schema['cache_entity_fieldable_panels_pane'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_entity_fieldable_panels_pane']['description'] = 'Cache table used to store fieldable_panels_pane entity records.';

  return $schema;
}

/**
 * Add UUID support.
 */
function fieldable_panels_panes_update_7101(&$sandbox) {

  // Make sure to add UUID field
  if (!db_field_exists('fieldable_panels_panes', 'uuid')) {
    db_add_field('fieldable_panels_panes', 'uuid', array('type' => 'char', 'length' => 36, 'default' => '', 'description' => 'The Universally Unique Identifier.'));
  }

  // Make sure to add VUUID field
  if (!db_field_exists('fieldable_panels_panes_revision', 'vuuid')) {
    db_add_field('fieldable_panels_panes_revision', 'vuuid', array('type' => 'char', 'length' => 36, 'default' => '', 'description' => 'The Universally Unique Identifier.'));
  }
}

/**
 * Delete stale revisions.
 */
function fieldable_panels_panes_update_7102(&$sandbox) {
  $existing = db_select('fieldable_panels_panes', 'f');
  $existing->fields('f', array('fpid'));

  db_delete('fieldable_panels_panes_revision')
    ->condition('fpid', $existing, 'NOT IN')
    ->execute();
}

/**
 * Reset the theme registry.
 */
function fieldable_panels_panes_update_7103(&$sandbox) {
  // All caches are flushed during the update process, so we do nothing.
  return t('Theme registry cache has been cleared.');
}

/*
 * Update menu paths.
 */
function fieldable_panels_panes_update_7104(&$sandbox) {
  // We don't have to flush caches manually since the update process will flush
  // all caches anyway.
  return t('Menu cache has been flushed.');
}

/**
 * Add support to link pane titles to paths.
 */
function fieldable_panels_panes_update_7105() {
  db_add_field('fieldable_panels_panes', 'link', array('type' => 'int', 'size' => 'tiny', 'description' => 'Whether or not this entity title will link to another page.'));
  db_add_field('fieldable_panels_panes', 'path', array('type' => 'varchar', 'length' => 255, 'description' => 'The path the title should link to.'));
}

/**
 * Add language column.
 */
function fieldable_panels_panes_update_7106() {
  // Make sure to add language field
  if (!db_field_exists('fieldable_panels_panes', 'language')) {
    db_add_field('fieldable_panels_panes', 'language', array(
      'description' => 'The {languages}.language of this entity.',
      'type' => 'varchar',
      'length' => 12,
      'not null' => TRUE,
      'default' => '',
    ));
  }
}

/**
 * Add cache table for optional entitycache support.
 */
function fieldable_panels_panes_update_7107() {
  if (!db_table_exists('cache_entity_fieldable_panels_pane')) {
    $schema = drupal_get_schema_unprocessed('system', 'cache');
    $schema['description'] = 'Cache table used to store fieldable_panel_pane entity records.';
    db_create_table('cache_entity_fieldable_panels_pane', $schema);
  }
}

/**
 * Adding Fieldable Panels Panes Type table and saving existing bundles to
 * database.
 */
function fieldable_panels_panes_update_7108() {
  ctools_include('export');
  $messages = array();

  // Copied from fieldable_panels_panes_schema() because the schema should not
  // be directly used during hook_update_N.
  $schema['fieldable_panels_pane_type'] = array(
    'description' => 'Entity bundle table for panel pane content.',
    'fields' => array(
      'name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'export' => array(
      'admin_title' => 'title',
      'admin_description' => 'description',
      'api' => array(
        'owner' => 'fieldable_panels_panes',
        'api' => 'fieldable_panels_pane_type',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'primary key' => array('name'),
  );


  // Add the new table for storing bundles.
  db_create_table('fieldable_panels_pane_type', $schema['fieldable_panels_pane_type']);

  // Store possible existing bundles provided by other modules.
  $bundles = array();
  $entity_info = entity_get_info('fieldable_panels_pane');
  
  // No bundles defined. This could happen if the module was updated and cache
  // cleared before update was run as entity info's cache will no longer
  // contain the old default.
  $t = get_t();
  if (empty($entity_info['bundles'])) {
    $entity_info['bundles'] = array(
      'fieldable_panels_pane' => array(
          'label' => $t('Panels pane'),
      ),
    );
  }
  
  foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
    $bundles[] = $bundle_info['label'];

    $item = ctools_export_crud_new('fieldable_panels_pane_type');
    $item->name = $bundle_name;
    $item->title = $bundle_info['label'];
    ctools_export_crud_save('fieldable_panels_pane_type', $item);
  }

  if (!empty($bundles)) {
    $messages[] = format_plural(count($bundles), 'Added existing bundle %bundle_names to database.', 'Added existing bundles %bundle_names to database.', array('%bundle_names' => implode(', ', $bundles)));
  }

  return implode('<br />', $messages);
}

/**
 * Update the length of the 'name' field in {fieldable_panels_pane}.
 */
function fieldable_panels_panes_update_7109() {
  db_change_field('fieldable_panels_pane_type', 'name', 'name', array(
    'description' => 'The machine-readable name of this type.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
}
