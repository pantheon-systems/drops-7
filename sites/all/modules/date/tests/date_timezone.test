<?php
/**
 * @file
 * Timezone tests.
 */
class DateTimezoneTestCase extends DateFieldBasic {

  /**
   * @todo.
   */
  public static function getInfo() {
    return array(
      'name' => 'Timezone & Granularity',
      'description' => 'Test combinations of date field timezone handling and granularity.',
      'group' => 'Date',
    );
  }

  /**
   * @todo.
   */
  public function testTimezone() {
    // Create a date fields with combinations of various timezone handling and
    // granularity.
    foreach (array('date', 'datestamp', 'datetime') as $field_type) {
      foreach (array('site', 'none', 'date', 'user', 'utc') as $tz_handling) {
        foreach (array('year', 'month', 'day', 'hour', 'minute', 'second') as $max_granularity) {
          // Skip invalid combinations.
          if (in_array($max_granularity, array('year', 'month', 'day')) && $tz_handling != 'none') {
            continue;
          }
          $field_name = "field_test";
          $label = 'Test';
          $granularity = date_granularity_array_from_precision($max_granularity);
          $options = array(
            'label' => $label,
            'widget_type' => 'date_text',
            'field_name' => $field_name,
            'field_type' => $field_type,
            'input_format' => 'custom',
            'input_format_custom' => 'm/d/Y - H:i:s',
            'tz_handling' => $tz_handling,
            'granularity' => $granularity,
          );
          $this->createDateField($options);
          $this->dateForm($field_name, $field_type, $max_granularity, $tz_handling);
          $this->deleteDateField($label);
        }
      }
    }
  }

  /**
   * @todo.
   */
  public function dateForm($field_name, $field_type, $max_granularity, $tz_handling) {
    variable_set('date_format_long', 'D, m/d/Y - H:i:s');
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit[$field_name . '[und][0][show_todate]'] = '1';
    switch ($max_granularity) {
      case 'year':
        $edit[$field_name . '[und][0][value][date]'] = '2010';
        $edit[$field_name . '[und][0][value2][date]'] = '2011';
        $should_be = '2010 to 2011';
        break;
      case 'month':
        $edit[$field_name . '[und][0][value][date]'] = '07/2010';
        $edit[$field_name . '[und][0][value2][date]'] = '08/2010';
        $should_be = '07/2010 to 08/2010';
        break;
      case 'day':
        $edit[$field_name . '[und][0][value][date]'] = '10/07/2010';
        $edit[$field_name . '[und][0][value2][date]'] = '10/08/2010';
        $should_be = 'Thu, 10/07/2010 to Fri, 10/08/2010';
        break;
      case 'hour':
        $edit[$field_name . '[und][0][value][date]'] = '10/07/2010 - 10';
        $edit[$field_name . '[und][0][value2][date]'] = '10/07/2010 - 11';
        $should_be = 'Thu, 10/07/2010 - 10 to Thu, 10/07/2010 - 11';
        break;
      case 'minute':
        $edit[$field_name . '[und][0][value][date]'] = '10/07/2010 - 10:30';
        $edit[$field_name . '[und][0][value2][date]'] = '10/07/2010 - 11:30';
        $should_be = 'Thu, 10/07/2010 - 10:30 to 11:30';
        break;
      case 'second':
        $edit[$field_name . '[und][0][value][date]'] = '10/07/2010 - 10:30:30';
        $edit[$field_name . '[und][0][value2][date]'] = '10/07/2010 - 11:30:30';
        $should_be = 'Thu, 10/07/2010 - 10:30:30 to 11:30:30';
        break;
    }
    $this->drupalPost('node/add/story', $edit, t('Save'));
    $this->assertText($edit['title'], "Node has been created");
    $this->assertText($should_be, "Found the correct date for a $field_type field using $max_granularity granularity with $tz_handling timezone handling.");
  }
}
