<?php
/**
 * @file
 * Pantheon Apache Solr module.
 *
 * Facilitates and debugs communication with Pantheon's Apache Solr service.
 */
define('PANTHEON_APACHESOLR_PORT', variable_get('pantheon_index_port', 449));
define('PANTHEON_APACHESOLR_HOST', variable_get('pantheon_index_host', 'index.'. variable_get('pantheon_tier', 'live') .'.getpantheon.com'));

/**
 * Implements hook_help().
 */
function pantheon_apachesolr_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pantheon_apachesolr':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('<a href="@url">Apache Solr</a> is a system that exposes APIs for indexing and searching site content. Pantheon provides a regular Solr v3.x server for each environment as a service.', array(
        '@url' => 'http://lucene.apache.org/solr/',
      )) . '</p>';

      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('For each Pantheon environment (dev, test and live), post the desired schema.xml to the Apache Solr server using the <a href="@url">post schema</a> interface. Step-by-step instructions can be found in <a href="@desk">Apache Solr on Pantheon</a>.', array(
        '@url' => url('admin/config/search/pantheon/schema'),
        '@desk' => url('https://www.getpantheon.com/docs/articles/sites/apache-solr/'),
      )) . '</p>';
      $output .= '</ol>';

      $output .= '<h3>' . t('Compatibility') . '</h3>';
      $output .= '<p>' . t('The pantheon_apachesolr module was optimized for use with:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . l(t('Apache Solr Search v7.x-1.4'), 'https://drupal.org/project/apachesolr', array('external' => TRUE,)) . '</li>';
      $output .= '<li>' . l(t('Search API Solr search v7.x-1.2'), 'https://drupal.org/project/search_api_solr', array('external' => TRUE,)) . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('Prior and development versions are not supported or recommended. Future versions should work; if you encounter a problem with a newer official release, please notify Pantheon Support.') . '</p>';

      $output .= '<h3>' . t('Vocabulary') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('bias') . '</dt>';
      $output .= '<dd>' . t('Allows certain parts of indexed items to influence the importance of search results. The higher the bias, the greater the influence; the range is 0.1 to 21.0.') . '</dd>';
      $output .= '<dt>' . t('core') . '</dt>';
      $output .= '<dd>' . t('A core is a separate configuration and index using a single Solr instance. A core is created when the schema is posted. For more information, see <a href="@url">http://wiki.apache.org/solr/CoreAdmin</a>', array('@url' => url('http://wiki.apache.org/solr/CoreAdmin'))) . '</dd>';
      $output .= '<dt>' . t('document') . '</dt>';
      $output .= '<dd>' . t('A document is similar to a database row, containing the contents of what is to be searched and whatever fields are associated with it, like title') . '</dd>';
      $output .= '<dt>' . t('facet') . '</dt>';
      $output .= '<dd>' . t('Search facets allow search results to be filtered; examples include seeing a list of potential filters and the count of matches for each filter on the left, like Amazon product searches.') . '</dd>';
      $output .= '<dt>' . t('index') . '</dt>';
      $output .= '<dd>' . t('structure containing extracted keywords from a document for rapid search and retrieval, similar to a database table') . '</dd>';
      $output .= '<dt>' . t('score') . '</dt>';
      $output .= '<dd>' . t('calculated relevance of matches influenced by bias, represented as a float') . '</dd>';
      $output .= '<dt>' . t('schema.xml') . '</dt>';
      $output .= '<dd>' . t('Contains details about the fields that documents can contain, and how those fields are handled when adding documents to the index or querying those fields. Must be posted using the pantheon_apachesolr module before indexing and searching will work. For more information, see <a href="@url">http://wiki.apache.org/solr/SchemaXml</a>', array('@url' => url('http://wiki.apache.org/solr/SchemaXml'))) . '</dd>';
      $output .= '</dl>';

      $output .= '<h3>' . t('Known Limitations') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Anything that takes more than 5 seconds to send to to the Solr server be indexed will timeout, which will block indexing. For example, large documents attached to Drupal nodes. In these cases, the developer must work with the content or code to exempt the nodes and/or files from being indexed.') . '</li>';
      $output .= '<li>' . t('solrconfig.xml and synonyms.txt cannot be modified.') . '</li>';
      $output .= '</ul>';

      return $output;
      break;
    case 'admin/config/search/pantheon/schema':
      $output = '<p>' . t('Posting the schema.xml provisions Pantheon\'s solr service for the current site environment.') . '</p>';
      return $output;
      break;
    case 'admin/config/search/pantheon/status':
      return '<p>' . t('Check to see if the schema has been posted and that the Solr server responds to ping requests.') . '</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function pantheon_apachesolr_permission() {
  return array(
    'administer pantheon apachesolr' => array(
      'title' => t('Administer Pantheon Apache Solr'),
      'description' => t('Access to administration pages of Pantheon Apache Solr.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pantheon_apachesolr_menu() {
  $items = array();

  $items['admin/config/search/pantheon'] = array(
    'title' => 'Pantheon Apache Solr',
    'description' => 'Check communication with Pantheon\'s Apache Solr Service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pantheon_apachesolr_status'),
    'access arguments' => array('administer pantheon apachesolr'),
  );

  $items['admin/config/search/pantheon/status'] = array(
    'title' => 'Status',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/search/pantheon/schema'] = array(
    'title' => 'Post schema.xml',
    'description' => "Post schema.xml to Pantheon's Apache Solr Service",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pantheon_apachesolr_post_schema_form'),
    'access arguments' => array('administer pantheon apachesolr'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/search/pantheon/query'] = array(
    'title' => 'Execute query',
    'description' => "Send raw query string Pantheon's Apache Solr Service for debugging",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pantheon_apachesolr_query'),
    'access arguments' => array('administer pantheon apachesolr'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  return $items;
}

/**
 * Implements hook_search_api_service_info_alter().
 *
 * Change the Search API Solr Service class to our custom class. This approach
 * is used for Search API RC4 and greater which no longer uses the SolrPHP
 * Client library.
 */
function pantheon_apachesolr_search_api_service_info_alter(array &$service_info) {
  if (pantheon_apachesolr_platform_detected() && !function_exists('_search_api_solr_solrphpclient_path')) {
    // The Search API Solr service class is stored in a variable so that it can
    // be overridden if necessary to use the default SearchApiSolrService class.
    $service_info['search_api_solr_service']['class'] = variable_get('pantheon_apachesolr_search_api_solr_service_class', 'PantheonApachesolrSearchApiSolrService');
  }
}

/**
 * Default CURL options for Solr requests.
 *
 * @return array
 *   Clean standards.
 */
function pantheon_apachesolr_curlopts() {
  return array(
    CURLOPT_HEADER => 1,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_TIMEOUT_MS => 5000,
    CURLOPT_CONNECTTIMEOUT_MS => 5000,
    CURLOPT_HTTPHEADER => array('Content-type:text/xml;', 'Expect:'),
  );
}

/**
 * Return 'true' if the Pantheon platform is detected.
 * @return string
 */
function pantheon_apachesolr_platform_detected() {
  return isset($_ENV['PANTHEON_ENVIRONMENT']);
}

/**
 * Return the path to the directory containing the certificates.
 */
function pantheon_apachesolr_certs_dir() {
  if (pantheon_apachesolr_platform_detected()) {
    return $_ENV['HOME'] . '/certs';
  }
  return './';
}

/**
 * Return the path to the client certificate.
 * @return string
 */
function pantheon_apachesolr_client_cert() {
  return pantheon_apachesolr_certs_dir() . '/binding.pem';
}

/**
 * Display an error message if not running on the Pantheon platform.
 */
function pantheon_apachesolr_display_error_if_disabled() {
  $platform_detected = pantheon_apachesolr_platform_detected();
  if (!$platform_detected) {
    drupal_set_message(t('Pantheon Platform not detected. The Pantheon Apache Solr module only runs in a Pantheon environment.'), 'error');
  }
  return $platform_detected;
}

/**
 * @param string $schema
 *   Path to local schema XML
 *
 * @return string
 *   Response from Solr.
 */
function pantheon_apachesolr_post_schema_exec($schema) {
  if (!pantheon_apachesolr_platform_detected()) {
    return false;
  }
  // Check for empty schema.
  if (filesize($schema) < 1) {
    watchdog('pantheon_apachesolr', 'Empty schema !schema - not posting', array(
      '!schema' => $schema,
    ), WATCHDOG_ERROR);
    return NULL;
  }
  // Check for invalid XML.
  $schema_file = file_get_contents($schema);
  if (!@simplexml_load_string($schema_file)) {
    watchdog('pantheon_apachesolr', 'Schema !schema is not XML - not posting', array(
      '!schema' => $schema,
    ), WATCHDOG_ERROR);
    return NULL;
  }

  $ch = curl_init();
  $host = PANTHEON_APACHESOLR_HOST;
  $path = 'sites/self/environments/'. variable_get('pantheon_environment', 'dev') .'/index';

  $client_cert = pantheon_apachesolr_client_cert();
  $url = 'https://'. $host .'/'. $path;

  $file = fopen($schema, 'r');
  // set URL and other appropriate options
  $opts = array(
    CURLOPT_URL => $url,
    CURLOPT_PORT => PANTHEON_APACHESOLR_PORT,
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_SSLCERT => $client_cert,
    CURLOPT_HTTPHEADER => array('Content-type:text/xml; charset=utf-8'),
    CURLOPT_PUT => TRUE,
    CURLOPT_BINARYTRANSFER => 1,
    CURLOPT_INFILE => $file,
    CURLOPT_INFILESIZE => filesize($schema),
  );
  curl_setopt_array($ch, $opts);
  $response = curl_exec($ch);
  $info = curl_getinfo($ch);
  $success_codes = array(
    '200',
    '201',
    '202',
    '204'
  );
  $success = (in_array($info['http_code'], $success_codes));
  fclose($file);
  if (!$success) {
    watchdog('pantheon_apachesolr', 'Error !error posting !schema to !url', array(
      '!error' => curl_error($ch),
      '!schema' => $schema,
      '!url' => $url,
    ), WATCHDOG_ERROR);
  }
  else {
    variable_set('pantheon_apachesolr_schema', $schema);
  }

  return $success;
}

/**
 * Implements hook_form_form_id_alter().
 */
function pantheon_apachesolr_form_apachesolr_settings_alter(&$form, &$form_state, $form_id) {
  $form['apachesolr_host_settings']['note'] = array(
    '#type' => 'item',
    '#title' => t('Pantheon Notice'),
    '#markup' => '<p>'. t('You should not need to configure solr host connections: Pantheon is managing your Solr connection settings. However, you can use this admin interface to configure bias, facets, etc.') .'</p>',
    '#weight' => -10,
  );
  // Remove unsupported operations.
  unset($form['apachesolr_host_settings']['table']['#header'][3]);
  foreach($form['apachesolr_host_settings']['table']['#rows'] as $rid => $row) {
    unset($form['apachesolr_host_settings']['table']['#rows'][$rid]['data']['edit']);
    unset($form['apachesolr_host_settings']['table']['#rows'][$rid]['data']['clone']);
    unset($form['apachesolr_host_settings']['table']['#rows'][$rid]['data']['delete']);
  }
}

/**
 * Implements hook_form_form_id_alter().
 */
function pantheon_apachesolr_form_apachesolr_environment_edit_form_alter(&$form, &$form_state, $form_id) {
  $form['note'] = array(
    '#type' => 'item',
    '#title' => t('Pantheon Notice'),
    '#markup' => '<p>'. t('You should not need to configure solr host connections: Pantheon is managing your Solr connection settings. However, you can use this admin interface to configure bias, facets, etc.') .'</p>',
    '#weight' => -10,
  );
  unset($form['actions']['save']);
}

/**
 * Debug query string.
 */
function pantheon_apachesolr_query($form, &$form_state) {
  $form = array();

  $platform_detected = pantheon_apachesolr_display_error_if_disabled();
  if (!$platform_detected) {
    return array();
  }

  if (isset($form_state['content'])) {
    if (isset($form_state['textarea']) && $form_state['textarea']) {
      $form['content'] = array(
        '#title' => t('Result details'),
        '#type' => 'textarea',
        '#cols' => 180,
        '#rows' => 25,
        '#default_value' => $form_state['content'],
      );
    }
    else {
      $form['content'] = array(
        '#markup' => $form_state['content'],
        '#prefix' => '<h2>' . t('Result details') . '</h2><div style="font-size: 11px;"><tt><pre>',
        '#suffix' => '</pre></tt></div>',
      );
    }
  }
  if (isset($form_state['content_curl'])) {
    $form['content_curl'] = array(
      '#markup' => $form_state['content_curl'],
      '#prefix' => '<h2>' . t('CURL info') . '</h2><div style="font-size: 11px;"><tt><pre>',
      '#suffix' => '</pre></tt></div>',
    );
  }

  $host = PANTHEON_APACHESOLR_HOST;
  $path = 'sites/self/environments/'. variable_get('pantheon_environment', 'dev') .'/index';
  $url = 'https://'. $host .'/'. $path;

  $form['query_string'] = array(
    '#type' => 'fieldset',
    '#title' => t('Query'),
    '#description' => t('Debug Solr responses by sending a query string directly to @url and viewing the raw response. For example, "/admin/system" and "/admin/ping" for apachesolr or "/admin/ping?q=id:1" for search_api_solr (without the quotes).', array(
      '@url' => $url,
    )),
  );

  $form['query_string']['query'] = array(
    '#type' => 'textarea',
    '#title' => t('Query string'),
    '#required' => TRUE,
    '#description' => t('The query string, without the path, to execute.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Send query string',
  );

  return $form;
}

/**
 * Perform a user defined query.
 */
function pantheon_apachesolr_query_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  $host = PANTHEON_APACHESOLR_HOST;
  $path = 'sites/self/environments/'. variable_get('pantheon_environment', 'dev') .'/index';
  $url = 'https://'. $host .'/'. $path . $form_state['values']['query'];

  $ch = curl_init();
  curl_setopt_array($ch, pantheon_apachesolr_curlopts());

  curl_setopt_array($ch, array(
    CURLOPT_URL => $url,
    CURLOPT_PORT => PANTHEON_APACHESOLR_PORT,
    CURLOPT_SSLCERT => pantheon_apachesolr_client_cert(),
    CURLOPT_HEADER => 0,
  ));

  $response = curl_exec($ch);
  $info = curl_getinfo($ch);
  curl_close($ch);

  if (!$response) {
    $form_state['content'] = 'NULL response!';
  }
  else if (($info['http_code'] == 404) || (substr($info['http_code'], 0, 1) == 5)) {
    $form_state['content'] = $response;
    $form_state['textarea'] = TRUE;
  }
  else if ($info['http_code'] != 200) {
    $form_state['content'] = $response;
  }
  else {
    try {
      $oXML = @new SimpleXMLElement($response);
      $form_state['content'] = var_export($oXML, TRUE);
    }
    catch (Exception $e) {
      $json_response = @json_decode($response);
      if (json_last_error() == JSON_ERROR_NONE) {
        $form_state['content'] = pantheon_apachesolr_jsonpp($response);
      }
      else {
        $form_state['content'] = $response;
      }
    }
  }

  $form_state['content_curl'] = var_export($info, TRUE);
}

/**
 * Upload schema.xml to Pantheon's Apache Solr Service; required to use.
 */
function pantheon_apachesolr_post_schema_form($form, &$form_state) {
  $form = array();

  $platform_detected = pantheon_apachesolr_display_error_if_disabled();
  if (!$platform_detected) {
    return array();
  }

  $files = drupal_system_listing('/schema.*\.xml$/', 'modules', 'uri', 0);
  $schemas = array();
  $recommended = '3.x/schema.xml';
  $wrong_versions = array(
    '4.x',
    '1.4',
    'extra',
  );

  $default = '';

  foreach ($files as $data) {
    if (substr_compare($data->uri, $recommended, -strlen($recommended), strlen($recommended)) === 0) {
      $schemas[$data->uri] = '<strong>' . $data->uri . '</strong> (' . t('recommended') . ')';
    }
    else {
      $schemas[$data->uri] = $data->uri;
    }
    // Unset unsupported versions.
    foreach ($wrong_versions as $version) {
      if (strpos($data->uri, $version) !== FALSE) {
        unset($schemas[$data->uri]);
      }
    }

    if (!$recommended && in_array($data->uri, array(
      'sites/all/modules/apachesolr/solr-conf/solr-3.x/schema.xml',
      'sites/all/modules/search_api_solr/solr-conf/3.x/schema.xml',
    ))) {
      $recommended = $data->uri;
    }
  }
  asort($schemas);

  $form['schemas'] = array(
    '#type' => 'fieldset',
    '#title' => t('Solr Schema File'),
    '#description' => t('The following schema.xml files exist in your Drupal site code. Pantheon uses Apache Solr v3.5.0, so you should use 3.x/schema.xml as the base configuration.') . '<br/><br/>',
    '#weight' => -10,
  );
  if (count($schemas) > 0) {
    $form['schemas']['pantheon_apachesolr_schema'] = array(
      '#type' => 'radios',
      '#title' => t('Available schemas:'),
      '#options' => $schemas,
      '#default_value' => variable_get('pantheon_apachesolr_schema', ''),
    );
  }
  else {
    drupal_set_message(t('No schema.xml files found in your codebase! Are you sure you have a supported Apache Solr module installed?'), 'error');
    return array();
  }
  $form['schemas']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Post schema'),
    '#options' => $schemas,
  );

  return $form;
}

/**
 * Form submit handler.
 *
 * Post the schema, set the variable.
 */
function pantheon_apachesolr_post_schema_form_submit($form, &$form_state) {
  $result = pantheon_apachesolr_post_schema_exec($form_state['values']['pantheon_apachesolr_schema']);
  if ($result != NULL) {
    drupal_set_message(t('Posted schema.xml to Pantheon Solr Service.'));
  }
  else {
    drupal_set_message(t('Unable to post schema.xml to Pantheon Solr Service!'), 'error');
  }
}

/**
 * Pantheon Apache Solr Status form callback.
 */
function pantheon_apachesolr_status($form, &$form_state) {
  $form = array();

  $platform_detected = pantheon_apachesolr_display_error_if_disabled();
  if (!$platform_detected) {
    return array();
  }

  $host = PANTHEON_APACHESOLR_HOST;

  // Determine what schema was used.
  $schema = 'generic';
  $pantheon_apachesolr_schema = variable_get('pantheon_apachesolr_schema');

  if ($pantheon_apachesolr_schema == '') {
    $form['content'] = array(
      '#title' => t('The schema has not been posted!'),
      '#markup' => t('You have not posted the schema.xml to the @pantheon_environment environment using the <a href="@url">post schema</a> interface.', array(
        '@url' => url('admin/config/search/pantheon/schema'),
        '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
      )),
      '#prefix' => '<div class="messages error">',
      '#suffix' => '</div>',
    );
    return $form;
  }
  else if (strpos($pantheon_apachesolr_schema, 'search_api_solr') !== FALSE) {
    $schema = 'search_api_solr';
  }
  else if (strpos($pantheon_apachesolr_schema, 'apachesolr') !== FALSE) {
    $schema = 'apachesolr';
  }

  $form['schema'] = array(
    '#title' => t('Schema'),
    '#markup' => t('The following schema has been posted to the Pantheon Apache Solr service: @pantheon_apachesolr_schema', array(
      '@pantheon_apachesolr_schema' => $pantheon_apachesolr_schema,
    )),
    '#prefix' => '<div class="messages ok">',
    '#suffix' => '</div>',
  );

  // Ping.
  $path = 'sites/self/environments/' . variable_get('pantheon_environment', 'dev') . '/index/admin/ping';

  if ($schema == 'search_api_solr') {
    $path .= '?q=id:1';
  }

  $url = 'https://'. $host . '/' . $path;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSLCERT, pantheon_apachesolr_client_cert());

  $opts = pantheon_apachesolr_curlopts();
  $opts[CURLOPT_URL] = $url;
  $opts[CURLOPT_PORT] = PANTHEON_APACHESOLR_PORT;
  $opts[CURLOPT_CONNECTTIMEOUT] = 5;
  $opts[CURLOPT_RETURNTRANSFER] = 1;

  curl_setopt_array($ch, $opts);
  $response = curl_exec($ch);
  $info = curl_getinfo($ch);

  if ($response === FALSE) {
    $error = curl_error($ch);
    $form['content'] = array(
      '#title' => t('Ping'),
      '#markup' => t('The Pantheon Apache Solr service in the @pantheon_environment environment did not respond: @error', array(
        '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
        '@error' => $error,
      )),
      '#prefix' => '<div class="messages error">',
      '#suffix' => '</div>',
    );
    curl_close($ch);
    return $form;
  }

  curl_close($ch);

  if ($info['http_code'] == 200) {
    $form['content'] = array(
       '#title' => t('Ping'),
       '#markup' => t('The Pantheon Apache Solr service in the @pantheon_environment environment successfully responded to a/an @schema Solr ping request in @total_time seconds.', array(
         '@schema' => $schema,
         '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
         '@total_time' => $info['total_time'],
      )),
      '#prefix' => '<div class="messages ok">',
      '#suffix' => '</div>',
    );
  }
  else if ($info['http_code'] == 404) {
    $form['content'] = array(
      '#title' => t('Ping'),
      '#markup' => t('The Pantheon Apache Solr service in the @pantheon_environment environment was not found, have you <a href="@posted">posted the schema</a> in this environment yet?', array(
        '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
        '@posted' => url('admin/config/search/pantheon/schema'),
      )),
      '#prefix' => '<div class="messages error">',
      '#suffix' => '</div>',
    );
    unset($form['schema']);
    return $form;
  }
  else {
    $response = explode(PHP_EOL, $response);
    $form['content'] = array(
       '#title' => t('Ping'),
       '#markup' => t('The Pantheon Apache Solr service in the @pantheon_environment environment responded to a/an @schema Solr ping request using @path with "@response"', array(
         '@path' => $path,
         '@schema' => $schema,
         '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
         '@response' => trim($response[0]),
       )),
      '#prefix' => '<div class="messages error">',
      '#suffix' => '</div>',
    );
    return $form;
  }

  // Solr Stats.
  $path = 'sites/self/environments/' . variable_get('pantheon_environment', 'dev') . '/index/admin/stats.jsp';
  $url = 'https://'. $host . '/' . $path;

  $ch = curl_init();
  curl_setopt_array($ch, array(
    CURLOPT_URL => $url,
    CURLOPT_PORT => PANTHEON_APACHESOLR_PORT,
    CURLOPT_CONNECTTIMEOUT => 5,
    CURLOPT_SSLCERT => pantheon_apachesolr_client_cert(),
    CURLOPT_RETURNTRANSFER => 1,
  ));

  $response = curl_exec($ch);
  curl_close($ch);
  $oXML = new SimpleXMLElement($response);

  $debug = array(
    t('Core') => $oXML->core,
    t('Schema') => $oXML->schema,
  );

  $debug_str = '<h2>' . t('Core and Schema from Solr Server') . '</h2>';
  $debug_str .= '<dl>';
  foreach ($debug as $name => $value) {
    $debug_str .= '<dt>' . $name . '</dt><dd>' . $value . '</dd>';
  }
  $debug_str .= '</dl>';

  $form['debug'] = array(
    '#markup' => $debug_str,
  );

  return $form;
}

/**
 * jsonpp - Pretty print JSON data
 *
 * @link http://ryanuber.com/07-10-2012/json-pretty-print-pre-5.4.html
 *
 * In versions of PHP < 5.4.x, the json_encode() function does not yet provide a
 * pretty-print option. In lieu of forgoing the feature, an additional call can
 * be made to this function, passing in JSON text, and (optionally) a string to
 * be used for indentation.
 *
 * @param string $json  The JSON data, pre-encoded
 * @param string $istr  The indentation string
 *
 * @return string
 */
function pantheon_apachesolr_jsonpp($json, $istr='  ') {
  $result = '';
  for($p=$q=$i=0; isset($json[$p]); $p++)
  {
    $json[$p] == '"' && ($p>0?$json[$p-1]:'') != '\\' && $q=!$q;
    if(strchr('}]', $json[$p]) && !$q && $i--)
    {
      strchr('{[', $json[$p-1]) || $result .= "\n".str_repeat($istr, $i);
    }
    $result .= $json[$p];
    if(strchr(',{[', $json[$p]) && !$q)
    {
      $i += strchr('{[', $json[$p])===FALSE?0:1;
      strchr('}]', $json[$p+1]) || $result .= "\n".str_repeat($istr, $i);
    }
  }
  return $result;
}

/**
 * Implements hook_requirements().
 */
function pantheon_apachesolr_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $requirements['pantheon_apachesolr']['title'] = t('Pantheon Apache Solr Service');

    $pantheon_apachesolr_schema = variable_get('pantheon_apachesolr_schema');

    // Schema has not been posted.
    if ($pantheon_apachesolr_schema == '') {
      $requirements['pantheon_apachesolr']['severity'] = REQUIREMENT_ERROR;
      $requirements['pantheon_apachesolr']['value'] = t('Schema not posted!');
      $requirements['pantheon_apachesolr']['description'] = t('You have not posted the schema.xml to the @pantheon_environment environment. Make sure you have <a href="@enableurl" target="_blank">enabled the Pantheon Apache Solr add on</a> and then <a href="@url">post your schema</a> using the module interface. ', array(
        '@url' => url('admin/config/search/pantheon/schema'),
        '@enableurl' => 'https://www.getpantheon.com/docs/articles/sites/apache-solr/',
        '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
      ));
    }
    else {
      $requirements['pantheon_apachesolr']['description'] = t('The last schema posted was @pantheon_apachesolr_schema', array(
        '@pantheon_apachesolr_schema' => $pantheon_apachesolr_schema,
      ));
      // Ping.
      $host = PANTHEON_APACHESOLR_HOST;
      $path = 'sites/self/environments/' . variable_get('pantheon_environment', 'dev') . '/index/admin/ping';
      $schema = strpos($pantheon_apachesolr_schema, 'search_api_solr') !== FALSE ? 'search_api_solr' : 'generic';

      if ($schema == 'search_api_solr') {
        $path .= '?q=id:1';
      }

      $url = 'https://'. $host . '/' . $path;

      $ch = curl_init();
      curl_setopt($ch, CURLOPT_SSLCERT, pantheon_apachesolr_client_cert());

      $opts = pantheon_apachesolr_curlopts();
      $opts[CURLOPT_URL] = $url;
      $opts[CURLOPT_PORT] = PANTHEON_APACHESOLR_PORT;
      $opts[CURLOPT_CONNECTTIMEOUT] = 5;
      $opts[CURLOPT_RETURNTRANSFER] = 1;

      curl_setopt_array($ch, $opts);
      $response = curl_exec($ch);
      $info = curl_getinfo($ch);
      curl_close($ch);

      if ($info['http_code'] == 200) {
        $requirements['pantheon_apachesolr']['description'] .= '<br/>' . t('Service in the @pantheon_environment environment responded to a ping request in @total_time seconds.', array(
          '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
          '@total_time' => $info['total_time'],
        ));
        $requirements['pantheon_apachesolr']['value'] = t('The Pantheon Solr service is responding normally.');
      }
      else if ($info['http_code'] == 404) {
        $requirements['pantheon_apachesolr']['severity'] = REQUIREMENT_ERROR;
        $requirements['pantheon_apachesolr']['description'] = t('The Pantheon Apache Solr service in the @pantheon_environment environment was not found, have you <a href="@posted">posted the schema</a> in this environment yet?', array(
          '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
          '@posted' => url('admin/config/search/pantheon/schema'),
        ));
        $requirements['pantheon_apachesolr']['value'] = t('Solr service in @pantheon_environment environment not found!', array(
          '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
        ));
      }
      else {
        $requirements['pantheon_apachesolr']['severity'] = REQUIREMENT_ERROR;
        $requirements['pantheon_apachesolr']['value'] = t('Solr service @pantheon_environment did not respond!', array(
          '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
        ));
        $requirements['pantheon_apachesolr']['description'] .= '<br/>' . t('Service in the @pantheon_environment environment did not respond to a Solr ping. See <a href="@status">the status page</a> for details.', array(
          '@status' => url('admin/config/search/pantheon/status'),
          '@pantheon_environment' => variable_get('pantheon_environment', 'dev'),
        ));
      }
    }
  }
  return $requirements;
}
